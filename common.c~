#include "common.h"
#include <string.h>
#include <delay.h>
#include <mega64a.h>
#include <glcd.h>


// --- «—”«· œ” Ê— AT ---
void send_at_command(char *command)
{
    printf("%s\r\n", command);
}

// --- Å«ò ò—œ‰ »«›— USART0 ---
void uart_flush0(void)
{
    unsigned char dummy;

    // Å«ò ò—œ‰ —ÃÌ” — ”Œ ù«›“«—Ì
    while (UCSR0A & (1<<RXC0)) {
        dummy = UDR0;
    }
//
//    // Å«ò ò—œ‰ »«›— ‰—„ù«›“«—Ì
//    rx_wr_index0 = rx_rd_index0 = 0;
//    rx_counter0 = 0;
//    rx_buffer_overflow0 = 0;
}


unsigned char read_serial_timeout_simple(char* buffer, int buffer_size, unsigned long timeout_ms) {
    int i = 0;
    unsigned long elapsed = 0;

    // »«›— „Õ·Ì —« ’›— „Ìùò‰Ì„
    memset(buffer, 0, buffer_size);

    //  «Ì„ù«Ê   ﬁ—Ì»Ì »— Õ”» Õ·ﬁÂ Ê delay
    while (elapsed < timeout_ms && i < buffer_size - 1) {
        // «ê— œ«œÂù«Ì œ— UART ¬„œÂ »«‘œ
        while (rx_counter0 > 0 && i < buffer_size - 1) {
            char c = getchar();  // ŒÊ«‰œ‰ Ìò ò«—«ò — «“ UART
            buffer[i++] = c;
            buffer[i] = '\0';

            // ‰„«Ì‘ “‰œÂ —ÊÌ GLCD
            glcd_outtextxy(0, 0, buffer);
        }
        delay_ms(1);
        elapsed++;
    }

    return (i > 0); // 1 «ê— Õœ«ﬁ· Ìò ò«—«ò — œ—Ì«›  ‘œÂ »«‘œ
}

unsigned char read_until_keyword_keep_all(char* buffer, int buffer_size, unsigned long timeout_ms, const char* keyword) {
    int i = 0;
    unsigned long elapsed = 0;
    int found = 0;
    int keyword_len = strlen(keyword);

    memset(buffer, 0, buffer_size);

    while (elapsed < timeout_ms && i < buffer_size - 1) {
        while (rx_counter0 > 0 && i < buffer_size - 1) {
            char c = getchar();
            buffer[i++] = c;
            buffer[i] = '\0';

            // »——”Ì ÊÃÊœ keyword œ— —‘ Â
            if (i >= keyword_len) {
                if (strstr(buffer, keyword) != NULL) {
                    found = 1;   // ò·„Â ÅÌœ« ‘œ
                }
            }
        }

        if (found) break;  // Êﬁ Ì CSQ Ì« CREG ÅÌœ« ‘œ° »Ì—Ê‰ »—Ê

        delay_ms(1);
        elapsed++;
    }

    return found;
}

//unsigned char read_serial_response(char* buffer, int buffer_size, int timeout_ms, const char* end_pattern) {
//    int i = 0;
//    unsigned int elapsed = 0;
//
//    memset(buffer, 0, buffer_size);
//
//    while (elapsed < (unsigned)timeout_ms) {
//        while (rx_counter0 > 0 && i < buffer_size - 1) {
//            buffer[i++] = getchar();
//        }
//
//        // »——”Ì «·êÊÌ Å«Ì«‰ œ«œÂ
//        if (end_pattern != NULL && strstr(buffer, end_pattern)) {
//            buffer[i] = '\0';
//            return 1;
//        }
//
//        if (i >= buffer_size - 1) {
//            buffer[i] = '\0';
//            return 1;
//        }
//
//        delay_ms(1);
//        elapsed++;
//    }
//
//    buffer[i] = '\0';
//    return (i > 0);
//}

//// --- ŒÊ«‰œ‰ Å«”Œ ”—Ì«· »« timeout ---
unsigned char read_serial_response(char* buffer, int buffer_size, int timeout_ms, const char* expected_response) {
    int i = 0;
    unsigned int elapsed = 0;

    // ?C? ??I? EC?? ?C?E?
    memset(buffer, 0, buffer_size);

    while (elapsed < (unsigned)timeout_ms) {
        // ?? EC?? E?C? EC?E??C? I? I?E?? ????? UART ?C EI?C??I
        while (rx_counter0 > 0 && i < buffer_size - 1) {
            buffer[i++] = getchar();  // getchar C? ????? EC?? ???A?I
        }
        // C?? C?EUC??C? ?C I?I??? ??I E???I??
        if (strstr(buffer, expected_response)) {
            return 1;
        }
        delay_ms(1);
        elapsed++;
    }
    // ?? C? ?C?C? EC???C?E ?? ??EC? I??? ?? ???????
    return (strstr(buffer, expected_response) != NULL);
}
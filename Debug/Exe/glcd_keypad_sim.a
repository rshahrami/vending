;
;
;#include <mega64a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Graphic Display functions
;#include <glcd.h>
;
;// Font used for displaying text
;// on the graphic display
;#include <font5x7.h>
;
;// Declare your global variables here
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include <string.h>   // »—«Ì ò«— »« —‘ ÂùÂ« „«‰‰œ strstr
;
;
;//  ⁄—Ì› ÅÊ—  C »—«Ì òÌùÅœ
;#define KEYPAD_PORT PORTC
;#define KEYPAD_DDR  DDRC
;#define KEYPAD_PIN  PINC
;
;//  ⁄—Ì› ÅÌ‰ùÂ«Ì ” Ê‰ (Œ—ÊÃÌ)
;#define COL1_PIN 0
;#define COL2_PIN 1
;#define COL3_PIN 2
;
;//  ⁄—Ì› ÅÌ‰ùÂ«Ì ”ÿ— (Ê—ÊœÌ) - »Â ’Ê—  ‰«„— »
;#define ROW1_PIN 7
;#define ROW2_PIN 5
;#define ROW3_PIN 6
;#define ROW4_PIN 4
;
;char pressed_key;
;// »«›— »—«Ì –ŒÌ—Â Å«”ŒùÂ«Ì œ—Ì«› Ì «“ SIM800
;char response_buffer[100];
;
;
;//  «»⁄Ì »—«Ì «—”«· œ” Ê— AT »Â „«éÊ·
;void send_at_command(char *command)
; 0000 002B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002C     // «—”«· œ” Ê— »Â Â„—«Â ò«—«ò —Â«Ì »«“ê‘  »Â «» œ«Ì Œÿ (Carriage Return & Line Feed)
; 0000 002D     printf("%s\r\n", command);
;PCODE: $0000000F VOL: 0
;	*command -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002E }
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;
;
;// «Ì‰  «»⁄  « “„«‰Ì òÂ "OK" Ì« "ERROR" —« ÅÌœ« ò‰œ Ì« “„«‰‘  „«„ ‘Êœ° »Â ŒÊ«‰œ‰ «œ«„Â „ÌùœÂœ
;// Ê ò· Å«”Œ —« œ— response_buffer –ŒÌ—Â „Ìùò‰œ.
;void get_full_response(unsigned int timeout_ms)
; 0000 0034 {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0035     char line_buffer[100]; // »«›— „Êﬁ  »—«Ì ŒÊ«‰œ‰ Â— Œÿ
; 0000 0036     unsigned long int counter = 0;
; 0000 0037 
; 0000 0038     // Å«ò ò—œ‰ »«›— «’·Ì ﬁ»· «“ œ—Ì«›  Å«”Œ ÃœÌœ
; 0000 0039     memset(response_buffer, 0, 100);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;	timeout_ms -> Y+104
;	line_buffer -> Y+4
;	counter -> Y+0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003A 
; 0000 003B     while(counter < timeout_ms)
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 003C     {
; 0000 003D         // «ê— Ìò Œÿ ÃœÌœ œ— »«›— ”—Ì«· „ÊÃÊœ »Êœ
; 0000 003E         if (gets(line_buffer, 100))
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 003F         {
; 0000 0040             // ¬‰ —« »Â »«›— «’·Ì «÷«›Â ò‰
; 0000 0041             // «“ strncat »—«Ì Ã·ÊêÌ—Ì «“ ”——Ì“ »«›— «” ›«œÂ „Ìùò‰Ì„
; 0000 0042             strncat(response_buffer, line_buffer, sizeof(response_buffer) - strlen(response_buffer) - 1);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0043 
; 0000 0044             // »——”Ì ò‰ òÂ ¬Ì« »Â Å«Ì«‰ Å«”Œ —”ÌœÂù«Ì„ Ì« ‰Â
; 0000 0045             if (strstr(line_buffer, "OK"))
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0046             {
; 0000 0047                 break; // Å«”Œ "OK" œ—Ì«›  ‘œ° «“ Õ·ﬁÂ Œ«—Ã ‘Ê
;PCODE: $0000004E VOL: 0
; 0000 0048             }
; 0000 0049             if (strstr(line_buffer, "ERROR"))
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 004A             {
; 0000 004B                 break; // Å«”Œ "ERROR" œ—Ì«›  ‘œ° «“ Õ·ﬁÂ Œ«—Ã ‘Ê
;PCODE: $00000057 VOL: 0
; 0000 004C             }
; 0000 004D         }
;PCODE: $00000058 VOL: 0
; 0000 004E 
; 0000 004F         delay_ms(1);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0050         counter++;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0051     }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0052 }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0

	.DSEG
_0x8:
	.BYTE 0x9
;
;
;//  «»⁄ »—«Ì ŒÊ«‰œ‰ ò·Ìœ ›‘—œÂ ‘œÂ („‰ÿﬁ «”ò‰ ” Ê‰)
;char get_key(void)
; 0000 0057 {

	.CSEG
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0058     unsigned char row, col;
; 0000 0059 
; 0000 005A     // ¬—«ÌÂùÂ«ÌÌ »—«Ì „œÌ—Ì  ÅÌ‰ùÂ«Ì ‰«„— »
; 0000 005B     const unsigned char column_pins[3] = {COL1_PIN, COL2_PIN, COL3_PIN};
; 0000 005C     const unsigned char row_pins[4] = {ROW1_PIN, ROW2_PIN, ROW3_PIN, ROW4_PIN};
; 0000 005D 
; 0000 005E     // ¬—«ÌÂ »—«Ì ‰ê«‘  ò«—«ò —Â«Ì òÌùÅœ
; 0000 005F     const char key_map[4][3] = {
; 0000 0060         {'1', '2', '3'},
; 0000 0061         {'4', '5', '6'},
; 0000 0062         {'7', '8', '9'},
; 0000 0063         {'*', '0', '#'}
; 0000 0064     };
; 0000 0065 
; 0000 0066     // Õ·ﬁÂ «’·Ì: «”ò‰ ” Ê‰ùÂ«
; 0000 0067     for (col = 0; col < 3; col++)
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;	row -> R17
;	col -> R16
;	column_pins -> Y+18
;	row_pins -> Y+14
;	key_map -> Y+2
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0068     {
; 0000 0069         // Â„Â ” Ê‰ùÂ« —« Ìò „Ìùò‰Ì„ (Ì« »Â Õ«·  «„Åœ«‰” »«·« „Ìù»—Ì„)
; 0000 006A         KEYPAD_PORT |= (1 << COL1_PIN) | (1 << COL2_PIN) | (1 << COL3_PIN);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 006B 
; 0000 006C         // ” Ê‰ ›⁄·Ì —« ’›— „Ìùò‰Ì„  « ›⁄«· ‘Êœ
; 0000 006D         KEYPAD_PORT &= ~(1 << column_pins[col]);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 006E 
; 0000 006F         // ”ÿ—Â« —« »—«Ì  ‘ŒÌ’ ò·Ìœ ›‘—œÂ ‘œÂ »——”Ì „Ìùò‰Ì„
; 0000 0070         for (row = 0; row < 4; row++)
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0071         {
; 0000 0072             // «ê— Ìò ÅÌ‰ ”ÿ— »Â Œ«ÿ— ” Ê‰ ›⁄«·° ’›— ‘œÂ »«‘œ
; 0000 0073             if (!(KEYPAD_PIN & (1 << row_pins[row])))
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0074             {
; 0000 0075                 // »—«Ì Õ–› ‰ÊÌ“ (Debouncing)
; 0000 0076                 delay_ms(10);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0077 
; 0000 0078                 // œÊ»«—Â çò „Ìùò‰Ì„  « «“ ›‘—œ‰ ò·Ìœ „ÿ„∆‰ ‘ÊÌ„
; 0000 0079                 if (!(KEYPAD_PIN & (1 << row_pins[row])))
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 007A                 {
; 0000 007B                     // „‰ Ÿ— „Ìù„«‰Ì„  « ò«—»— œ”  ŒÊœ —« «“ —ÊÌ ò·Ìœ »—œ«—œ
; 0000 007C                     while (!(KEYPAD_PIN & (1 << row_pins[row])));
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 007D 
; 0000 007E                     // ò«—«ò — „—»ÊÿÂ —« »—„Ìùê—œ«‰Ì„
; 0000 007F                     return key_map[row][col];
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0080                 }
; 0000 0081             }
;PCODE: $000000CB VOL: 0
; 0000 0082         }
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0083     }
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0084 
; 0000 0085     // «ê— ÂÌç ò·ÌœÌ ›‘—œÂ ‰‘œÂ »Êœ° „ﬁœ«— ’›— (NULL) —« »—ê—œ«‰
; 0000 0086     return 0;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0087 }
;PCODE: $000000DE VOL: 0
;
;
;
;void main(void)
; 0000 008C {
;PCODE: $000000DF VOL: 0
; 0000 008D 
; 0000 008E     // Declare your local variables here
; 0000 008F     // Variable used to store graphic display
; 0000 0090     // controller initialization data
; 0000 0091     GLCDINIT_t glcd_init_data;
; 0000 0092 
; 0000 0093     // Input/Output Ports initialization
; 0000 0094     // Port A initialization
; 0000 0095     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0096     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000000E0 VOL: 0
;	glcd_init_data -> Y+0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0097     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0098     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0099 
; 0000 009A     // Port B initialization
; 0000 009B     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 009C     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 009D     // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 009E     PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 009F 
; 0000 00A0     // Port C initialization
; 0000 00A1     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 00A2     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00A3     // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=T Bit2=0 Bit1=0 Bit0=0
; 0000 00A4     PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00A5 
; 0000 00A6     // Port D initialization
; 0000 00A7     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00A8     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00A9     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00AA     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00AB 
; 0000 00AC     // Port E initialization
; 0000 00AD     // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=In Bit0=In
; 0000 00AE     DDRE=(0<<DDE7) | (0<<DDE6) | (1<<DDE5) | (1<<DDE4) | (1<<DDE3) | (1<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00AF     // State: Bit7=T Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=T Bit0=T
; 0000 00B0     PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00B1 
; 0000 00B2     // Port F initialization
; 0000 00B3     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00B4     DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00B5     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00B6     PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00B7 
; 0000 00B8     // Port G initialization
; 0000 00B9     // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00BA     DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00BB     // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00BC     PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00BD 
; 0000 00BE     // Timer/Counter 0 initialization
; 0000 00BF     // Clock source: System Clock
; 0000 00C0     // Clock value: Timer 0 Stopped
; 0000 00C1     // Mode: Normal top=0xFF
; 0000 00C2     // OC0 output: Disconnected
; 0000 00C3     ASSR=0<<AS0;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00C4     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00C5     TCNT0=0x00;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00C6     OCR0=0x00;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00C7 
; 0000 00C8     // Timer/Counter 1 initialization
; 0000 00C9     // Clock source: System Clock
; 0000 00CA     // Clock value: Timer1 Stopped
; 0000 00CB     // Mode: Normal top=0xFFFF
; 0000 00CC     // OC1A output: Disconnected
; 0000 00CD     // OC1B output: Disconnected
; 0000 00CE     // OC1C output: Disconnected
; 0000 00CF     // Noise Canceler: Off
; 0000 00D0     // Input Capture on Falling Edge
; 0000 00D1     // Timer1 Overflow Interrupt: Off
; 0000 00D2     // Input Capture Interrupt: Off
; 0000 00D3     // Compare A Match Interrupt: Off
; 0000 00D4     // Compare B Match Interrupt: Off
; 0000 00D5     // Compare C Match Interrupt: Off
; 0000 00D6     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00D7     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00D8     TCNT1H=0x00;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00D9     TCNT1L=0x00;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00DA     ICR1H=0x00;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00DB     ICR1L=0x00;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00DC     OCR1AH=0x00;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00DD     OCR1AL=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00DE     OCR1BH=0x00;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00DF     OCR1BL=0x00;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00E0     OCR1CH=0x00;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00E1     OCR1CL=0x00;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00E2 
; 0000 00E3     // Timer/Counter 2 initialization
; 0000 00E4     // Clock source: System Clock
; 0000 00E5     // Clock value: Timer2 Stopped
; 0000 00E6     // Mode: Normal top=0xFF
; 0000 00E7     // OC2 output: Disconnected
; 0000 00E8     TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00E9     TCNT2=0x00;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00EA     OCR2=0x00;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00EB 
; 0000 00EC     // Timer/Counter 3 initialization
; 0000 00ED     // Clock source: System Clock
; 0000 00EE     // Clock value: Timer3 Stopped
; 0000 00EF     // Mode: Normal top=0xFFFF
; 0000 00F0     // OC3A output: Disconnected
; 0000 00F1     // OC3B output: Disconnected
; 0000 00F2     // OC3C output: Disconnected
; 0000 00F3     // Noise Canceler: Off
; 0000 00F4     // Input Capture on Falling Edge
; 0000 00F5     // Timer3 Overflow Interrupt: Off
; 0000 00F6     // Input Capture Interrupt: Off
; 0000 00F7     // Compare A Match Interrupt: Off
; 0000 00F8     // Compare B Match Interrupt: Off
; 0000 00F9     // Compare C Match Interrupt: Off
; 0000 00FA     TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00FB     TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00FC     TCNT3H=0x00;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00FD     TCNT3L=0x00;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00FE     ICR3H=0x00;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00FF     ICR3L=0x00;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0100     OCR3AH=0x00;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0101     OCR3AL=0x00;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0102     OCR3BH=0x00;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0103     OCR3BL=0x00;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0104     OCR3CH=0x00;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0105     OCR3CL=0x00;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0106 
; 0000 0107     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0108     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0109     ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 010A 
; 0000 010B     // External Interrupt(s) initialization
; 0000 010C     // INT0: Off
; 0000 010D     // INT1: Off
; 0000 010E     // INT2: Off
; 0000 010F     // INT3: Off
; 0000 0110     // INT4: Off
; 0000 0111     // INT5: Off
; 0000 0112     // INT6: Off
; 0000 0113     // INT7: Off
; 0000 0114     EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0115     EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0116     EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0117 
; 0000 0118     // USART0 initialization
; 0000 0119     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 011A     // USART0 Receiver: On
; 0000 011B     // USART0 Transmitter: On
; 0000 011C     // USART0 Mode: Asynchronous
; 0000 011D     // USART0 Baud Rate: 9600
; 0000 011E     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 011F     UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0120     UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0121     UBRR0H=0x00;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0122     UBRR0L=0x33;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0123 
; 0000 0124     // USART1 initialization
; 0000 0125     // USART1 disabled
; 0000 0126     UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0127 
; 0000 0128     // Analog Comparator initialization
; 0000 0129     // Analog Comparator: Off
; 0000 012A     // The Analog Comparator's positive input is
; 0000 012B     // connected to the AIN0 pin
; 0000 012C     // The Analog Comparator's negative input is
; 0000 012D     // connected to the AIN1 pin
; 0000 012E     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 012F     SFIOR=(0<<ACME);
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0130 
; 0000 0131     // ADC initialization
; 0000 0132     // ADC disabled
; 0000 0133     ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0134 
; 0000 0135     // SPI initialization
; 0000 0136     // SPI disabled
; 0000 0137     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0138 
; 0000 0139     // TWI initialization
; 0000 013A     // TWI disabled
; 0000 013B     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 013C     // ----- €Ì—›⁄«· ò—œ‰ JTAG (»—«Ì «” ›«œÂ «“ ÅÊ— ùÂ«Ì C Ê F œ— ’Ê—  ‰Ì«“) -----
; 0000 013D     MCUCSR = (1 << JTD);
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 013E     MCUCSR = (1 << JTD);
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 013F     // Graphic Display Controller initialization
; 0000 0140     // The KS0108 connections are specified in the
; 0000 0141     // Project|Configure|C Compiler|Libraries|Graphic Display menu:
; 0000 0142     // DB0 - PORTA Bit 0
; 0000 0143     // DB1 - PORTA Bit 1
; 0000 0144     // DB2 - PORTA Bit 2
; 0000 0145     // DB3 - PORTA Bit 3
; 0000 0146     // DB4 - PORTA Bit 4
; 0000 0147     // DB5 - PORTA Bit 5
; 0000 0148     // DB6 - PORTA Bit 6
; 0000 0149     // DB7 - PORTA Bit 7
; 0000 014A     // E - PORTF Bit 4
; 0000 014B     // RD /WR - PORTF Bit 3
; 0000 014C     // RS - PORTF Bit 2
; 0000 014D     // /RST - PORTF Bit 7
; 0000 014E     // CS1 - PORTF Bit 5
; 0000 014F     // CS2 - PORTF Bit 6
; 0000 0150 
; 0000 0151     // Specify the current font for displaying text
; 0000 0152     glcd_init_data.font=font5x7;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0153     // No function is used for reading
; 0000 0154     // image data from external memory
; 0000 0155     glcd_init_data.readxmem=NULL;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0156     // No function is used for writing
; 0000 0157     // image data to external memory
; 0000 0158     glcd_init_data.writexmem=NULL;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0159 
; 0000 015A     glcd_init(&glcd_init_data);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 015B 
; 0000 015C 
; 0000 015D     glcd_setfont(font5x7);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 015E 
; 0000 015F     glcd_clear();
;PCODE: $0000016A VOL: 0
; 0000 0160     glcd_outtextxy(0, 0, "Initializing Module...");
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0161 
; 0000 0162     // !! ‰ò Â »”Ì«— „Â„: »Â „«éÊ· “„«‰ ò«›Ì »—«Ì »Ê  ‘œ‰ »œÂÌœ !!
; 0000 0163     delay_ms(1000); // 5 À«‰ÌÂ ’»— ò‰Ìœ. «Ì‰ “„«‰ »—«Ì ‘‰«”«ÌÌ ”Ì„ùò«—  ÕÌ« Ì «” .
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0164 
; 0000 0165     // ----- €Ì—›⁄«· ò—œ‰ Echo -----
; 0000 0166     glcd_clear();
;PCODE: $00000174 VOL: 0
; 0000 0167     glcd_outtextxy(0, 0, "Disabling Echo...");
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0168     send_at_command("ATE0");
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0169     get_full_response(1000); // «“  «»⁄ ÃœÌœ «” ›«œÂ ò‰Ìœ  « "OK" —« Â„ «“ »«›— Å«ò ò‰œ
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 016A     glcd_outtextxy(0, 10, response_buffer); // ‰„«Ì‘ Å«”Œ (»«Ìœ OK »«‘œ)
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 016B     delay_ms(2000);
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 016C 
; 0000 016D     // -----  ”  «— »«ÿ Å«ÌÂ -----
; 0000 016E     glcd_clear();
;PCODE: $00000189 VOL: 0
; 0000 016F     glcd_outtextxy(0, 0, "Checking AT...");
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0170     send_at_command("AT");
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 0171     get_full_response(1000); // „‰ Ÿ— Å«”Œ ò«„· »„«‰
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0172     glcd_outtextxy(0, 10, response_buffer); // ‰„«Ì‘ Å«”Œ (»«Ìœ OK »«‘œ)
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 0173     delay_ms(2000);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 0174 
; 0000 0175     // ----- »——”Ì Ê÷⁄Ì  ”Ì„ùò«—  -----
; 0000 0176     glcd_clear();
;PCODE: $0000019E VOL: 0
; 0000 0177     glcd_outtextxy(0, 0, "Checking SIM (AT+CPIN?)...");
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0178     send_at_command("AT+CPIN?");
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0179     get_full_response(2000); // „‰ Ÿ— Å«”Œ ò«„· »„«‰ («Ì‰ œ” Ê— „„ò‰ «”  ò„Ì ÿÊ· »ò‘œ)
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 017A     glcd_outtextxy(0, 10, response_buffer); // ‰„«Ì‘ ò· Å«”Œ —ÊÌ LCD
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 017B     delay_ms(2000);
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 017C 
; 0000 017D 
; 0000 017E     // ----- »——”Ì Ê÷⁄Ì  ”Ì„ùò«—  -----
; 0000 017F     glcd_clear();
;PCODE: $000001B3 VOL: 0
; 0000 0180     glcd_outtextxy(0, 0, "Checking Network...");
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 0181     send_at_command("AT+CREG?");
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0182     get_full_response(1000); // „‰ Ÿ— Å«”Œ ò«„· »„«‰ («Ì‰ œ” Ê— „„ò‰ «”  ò„Ì ÿÊ· »ò‘œ)
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0183     glcd_outtextxy(0, 10, response_buffer); // ‰„«Ì‘ ò· Å«”Œ —ÊÌ LCD
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0184     delay_ms(2000);
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0185 
; 0000 0186 
; 0000 0187 
; 0000 0188     // ----- »——”Ì Ê÷⁄Ì  ”Ì„ùò«—  -----
; 0000 0189     glcd_clear();
;PCODE: $000001C8 VOL: 0
; 0000 018A     glcd_outtextxy(0, 0, "Checking Network...");
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 018B     send_at_command("AT+CSQ");
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 018C     get_full_response(1000); // „‰ Ÿ— Å«”Œ ò«„· »„«‰ («Ì‰ œ” Ê— „„ò‰ «”  ò„Ì ÿÊ· »ò‘œ)
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 018D     glcd_outtextxy(0, 10, response_buffer); // ‰„«Ì‘ ò· Å«”Œ —ÊÌ LCD
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 018E     delay_ms(2000);
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 018F 
; 0000 0190     while (1)
;PCODE: $000001DD VOL: 0
; 0000 0191           {
; 0000 0192           // Place your code here
; 0000 0193 
; 0000 0194           }
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0195 }
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0

	.DSEG
_0x16:
	.BYTE 0x9C

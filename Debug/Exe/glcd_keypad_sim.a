;#include <mega64a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <glcd.h>
;#include <font5x7.h>
;#include <stdio.h>
;#include <string.h>
;#include <stdlib.h> // »—«Ì «” ›«œÂ «“  «»⁄ atoi
;
;// ---  ‰ŸÌ„«  «’·Ì ---
;#define APN "mcinet" // APN «Å—« Ê— ŒÊœ —« Ê«—œ ò‰Ìœ
;//#define SERVER_URL "http://google.com/api/authorize" // ¬œ—” ò«„· ”—Ê— ŒÊœ —« «Ì‰Ã« ﬁ—«— œÂÌœ
;#define SERVER_URL_POST "http://192.168.143.15/post/"
;
;// --- »«›—Â«Ì ”—«”—Ì ---
;char header_buffer[100];
;char content_buffer[100];
;char ip_address_buffer[16];
;char phone_number[16];
;char response_buffer[256]; // «›“«Ì‘ ”«Ì“ »«›— »—«Ì œ—Ì«›  Å«”ŒùÂ«Ì HTTP
;
;// ---  ⁄—Ì› ÅÌ‰ùÂ«Ì „Ê Ê— ---
;#define MOTOR_DDR DDRE
;#define MOTOR_PORT PORTE
;#define MOTOR_PIN_1 2
;#define MOTOR_PIN_2 3
;#define MOTOR_PIN_3 4
;
;// ---  ⁄—Ì› ÅÌ‰ùÂ«Ì òÌùÅœ ---
;#define KEYPAD_PORT PORTC
;#define KEYPAD_DDR DDRC
;#define KEYPAD_PIN PINC
;#define COL1_PIN 0
;#define COL2_PIN 1
;#define COL3_PIN 2
;#define ROW1_PIN 7
;#define ROW2_PIN 5
;#define ROW3_PIN 6
;#define ROW4_PIN 4
;
;//  «»⁄ «—”«· œ” Ê— AT »Â „«éÊ·
;void send_at_command(char *command)
; 0000 002A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002B     printf("%s\r\n", command);
;PCODE: $0000000F VOL: 0
;	*command -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002C }
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;
;unsigned char read_serial_response(char* buffer, int buffer_size, int timeout_ms, char* expected_response) {
; 0000 002E unsigned char read_serial_response(char* buffer, int buffer_size, int timeout_ms, char* expected_response) {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002F     int i = 0;
; 0000 0030     unsigned int timeout_counter = 0;
; 0000 0031     char c;
; 0000 0032 
; 0000 0033     // Clear the buffer at the start
; 0000 0034     memset(buffer, 0, buffer_size);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;	*buffer -> Y+12
;	buffer_size -> Y+10
;	timeout_ms -> Y+8
;	*expected_response -> Y+6
;	i -> R16,R17
;	timeout_counter -> R18,R19
;	c -> R21
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0035 
; 0000 0036     // Loop until the timeout period is reached
; 0000 0037     while (timeout_counter < timeout_ms) {
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0038         // This is the correct way to check if a character has been received on USART0
; 0000 0039         if (UCSR0A & (1 << RXC0)) {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 003A             c = getchar(); // Read the character from the buffer
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003B             if (i < (buffer_size - 1)) {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003C                 buffer[i++] = c; // Add it to our response buffer
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003D             }
; 0000 003E             // Optional: You can reset the timeout counter each time a character is received
; 0000 003F             // to wait for the *entire* message to finish. For simplicity, we'll use a fixed timeout.
; 0000 0040         } else {
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0041             // If no character is waiting, wait 1ms and increment the counter
; 0000 0042             delay_ms(1);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0043             timeout_counter++;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0044         }
;PCODE: $00000046 VOL: 0
; 0000 0045     }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0046 
; 0000 0047     // After the loop finishes, check if the expected text exists in the buffer
; 0000 0048     if (strstr(buffer, expected_response) != NULL) {
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0049         return 1; // Success!
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 004A     }
; 0000 004B 
; 0000 004C     return 0; // Failed to find the response
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 004D }
;PCODE: $00000058 VOL: 0
;
;
;//  «»⁄ »——”Ì „ÃÊ“ ‘„«—Â  ·›‰ «“ ÿ—Ìﬁ ”—Ê—
;unsigned char check_authorization_post(char* number)
; 0000 0052 {
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0053     char at_command[256];
; 0000 0054     char json_payload[100];
; 0000 0055     char* p_status;
; 0000 0056     int status_code = 0;
; 0000 0057     int json_len = 0;
; 0000 0058 
; 0000 0059     glcd_clear();
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;	*number -> Y+362
;	at_command -> Y+106
;	json_payload -> Y+6
;	*p_status -> R16,R17
;	status_code -> R18,R19
;	json_len -> R20,R21
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 005A     glcd_outtextxy(0, 0, "Authorizing (POST)...");
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 005B     glcd_outtextxy(0, 10, number);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 005C 
; 0000 005D     // 1. „ﬁœ«—œÂÌ «Ê·ÌÂ «— »«ÿ HTTP
; 0000 005E     send_at_command("AT+HTTPINIT");
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 005F     if (!read_serial_response(response_buffer, sizeof(response_buffer), 2000, "OK")) {
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0060         glcd_outtextxy(0, 20, "HTTP Init Failed");
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0061         delay_ms(2000);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0062         return 0;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0063     }
; 0000 0064 
; 0000 0065     // 2.  ‰ŸÌ„ Å«—«„ —Â«Ì HTTP
; 0000 0066     send_at_command("AT+HTTPPARA=\"CID\",1");
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0067     read_serial_response(response_buffer, sizeof(response_buffer), 1000, "OK");
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0068 
; 0000 0069     //  ‰ŸÌ„ URL
; 0000 006A     sprintf(at_command, "AT+HTTPPARA=\"URL\",\"%s\"", SERVER_URL_POST);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 006B     send_at_command(at_command);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 006C     read_serial_response(response_buffer, sizeof(response_buffer), 1000, "OK");
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 006D 
; 0000 006E     // **„Â„**:  ‰ŸÌ„ ‰Ê⁄ „Õ Ê« »—«Ì «—”«· JSON
; 0000 006F     send_at_command("AT+HTTPPARA=\"CONTENT\",\"application/json\"");
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0070     read_serial_response(response_buffer, sizeof(response_buffer), 1000, "OK");
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0071 
; 0000 0072     // 3. ¬„«œÂù”«“Ì Ê «—”«· œ«œÂ JSON
; 0000 0073     // ”«Œ  —‘ Â JSON
; 0000 0074     sprintf(json_payload, "{\"phone_number\":\"%s\"}", number);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0075     json_len = strlen(json_payload);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0076 
; 0000 0077     // «—”«· œ” Ê— AT+HTTPDATA »—«Ì „‘Œ’ ò—œ‰ ÿÊ· œ«œÂ
; 0000 0078     sprintf(at_command, "AT+HTTPDATA=%d,10000", json_len); // 10 À«‰ÌÂ „Â·  »—«Ì «—”«· œ«œÂ
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0079     send_at_command(at_command);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 007A 
; 0000 007B     // „‰ Ÿ— Å«”Œ "DOWNLOAD" «“ „«éÊ· »„«‰
; 0000 007C     if (read_serial_response(response_buffer, sizeof(response_buffer), 5000, "DOWNLOAD")) {
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 007D         // Å” «“ œ—Ì«›  "DOWNLOAD"° œ«œÂ «’·Ì JSON —« «—”«· ò‰
; 0000 007E         // «Ì‰  «»⁄ »«Ìœ œ«œÂ —« »Â ’Ê—  Œ«„ Ê »œÊ‰ ò«—«ò — «÷«›Â «—”«· ò‰œ
; 0000 007F         send_at_command(json_payload);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0080 
; 0000 0081         // „‰ Ÿ— Å«”Œ OK «“ „«éÊ· Å” «“ «—”«· œ«œÂ »„«‰
; 0000 0082         if (!read_serial_response(response_buffer, sizeof(response_buffer), 5000, "OK")){
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0083              goto auth_failed; // «ê— «—”«· œ«œÂ ‰«„Ê›ﬁ »Êœ
;PCODE: $000000F1 VOL: 0
; 0000 0084         }
; 0000 0085     } else {
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0086         goto auth_failed; // «ê— „«éÊ· »—«Ì œ—Ì«›  œ«œÂ ¬„«œÂ ‰‘œ
;PCODE: $000000F5 VOL: 0
; 0000 0087     }
;PCODE: $000000F6 VOL: 0
; 0000 0088 
; 0000 0089     // 4. «—”«· œ—ŒÊ«”  POST (Action=1)
; 0000 008A     send_at_command("AT+HTTPACTION=1");
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 008B 
; 0000 008C     // 5. „‰ Ÿ— Å«”Œ +HTTPACTION »„«‰ Ê ¬‰ —« »——”Ì ò‰
; 0000 008D     // Å«”Œ „Ê›ﬁ: +HTTPACTION: 1,200,LENGTH
; 0000 008E     if (read_serial_response(response_buffer, sizeof(response_buffer), 15000, "+HTTPACTION:")) {
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 008F         p_status = strstr(response_buffer, ",");
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0090         if (p_status) {
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0091             status_code = atoi(p_status + 1);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0092         }
; 0000 0093 
; 0000 0094         // «ê— òœ 200 »Êœ° Ì⁄‰Ì œ—ŒÊ«”  „Ê›ﬁ »ÊœÂ «” 
; 0000 0095         if (status_code == 200) {
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0096             glcd_outtextxy(0, 20, "Status OK (200)");
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0097 
; 0000 0098             // **«Œ Ì«—Ì**: „Ìù Ê«‰Ìœ Å«”Œ ”—Ê— —« »« AT+HTTPREAD »ŒÊ«‰Ìœ
; 0000 0099             // Ê »——”Ì ò‰Ìœ òÂ ¬Ì« Õ«ÊÌ "OK" Â”  Ì« ŒÌ—.
; 0000 009A             // send_at_command("AT+HTTPREAD");
; 0000 009B             // read_serial_response(...);
; 0000 009C 
; 0000 009D             glcd_outtextxy(0, 30, "Authorized!");
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 009E             delay_ms(1500);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 009F             send_at_command("AT+HTTPTERM"); // Å«Ì«‰ œ«œ‰ »Â «— »«ÿ
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00A0             read_serial_response(response_buffer, sizeof(response_buffer), 1000, "OK");
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00A1             return 1; // „Ê›ﬁÌ 
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00A2         }
; 0000 00A3     }
;PCODE: $00000135 VOL: 0
; 0000 00A4 
; 0000 00A5 // »—ç”» »—«Ì „œÌ—Ì  Œÿ«
; 0000 00A6 auth_failed:
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00A7     glcd_clear();
;PCODE: $00000138 VOL: 0
; 0000 00A8     glcd_outtextxy(0, 25, "Authorization Failed!");
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00A9     delay_ms(2000);
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00AA     send_at_command("AT+HTTPTERM"); // «— »«ÿ —« œ— Â— ’Ê—  Œ« „Â »œÂ
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00AB     read_serial_response(response_buffer, sizeof(response_buffer), 1000, "OK");
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00AC     return 0; // ‘ò” 
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00AD }
;PCODE: $00000152 VOL: 0

	.DSEG
_0xA:
	.BYTE 0xF7
;
;///////////////////////////////////////////////////////////////////////////////////////////
;
;unsigned char init_sms(void)
; 0000 00B2 {

	.CSEG
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00B3     glcd_clear();
;PCODE: $00000155 VOL: 0
; 0000 00B4     glcd_outtextxy(0, 0, "Setting SMS Mode...");
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00B5     send_at_command("AT+CMGF=1");
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00B6     delay_ms(500);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00B7 
; 0000 00B8     send_at_command("AT+CNMI=2,2,0,0,0");
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00B9     delay_ms(500);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00BA 
; 0000 00BB     send_at_command("AT+CMGDA=\"DEL ALL\"");
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00BC     delay_ms(2000);
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 00BD 
; 0000 00BE     glcd_outtextxy(0, 10, "SMS Ready.");
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00BF     delay_ms(1000);
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00C0     return 1;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00C1 }
;PCODE: $00000177 VOL: 0

	.DSEG
_0x13:
	.BYTE 0x4E
;
;unsigned char init_GPRS(void)
; 0000 00C4 {

	.CSEG
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00C5     char at_command[50];
; 0000 00C6     char response[100]; // Local buffer for the response
; 0000 00C7 
; 0000 00C8     glcd_clear();
;PCODE: $0000017A VOL: 0
;	at_command -> Y+100
;	response -> Y+0
;PCODE: $0000017B VOL: 0
; 0000 00C9     glcd_outtextxy(0, 0, "Connecting to GPRS...");
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00CA 
; 0000 00CB     send_at_command("AT+SAPBR=3,1,\"Contype\",\"GPRS\"");
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00CC     delay_ms(1500);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00CD 
; 0000 00CE     sprintf(at_command, "AT+SAPBR=3,1,\"APN\",\"%s\"", APN);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 00CF     send_at_command(at_command);
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00D0     delay_ms(1500);
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 00D1 
; 0000 00D2     send_at_command("AT+SAPBR=1,1");
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00D3     delay_ms(3000);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00D4 
; 0000 00D5     glcd_clear();
;PCODE: $0000019E VOL: 0
; 0000 00D6     glcd_outtextxy(0, 0, "Fetching IP...");
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 00D7     send_at_command("AT+SAPBR=2,1"); // Request IP
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00D8 
; 0000 00D9     // Attempt to read the response for 5 seconds, looking for "+SAPBR:"
; 0000 00DA     // FIX: Added the 4th argument, "+SAPBR:", to the function call.
; 0000 00DB     if (read_serial_response(response, sizeof(response), 5000, "+SAPBR:")) {
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 00DC         glcd_outtextxy(0, 10, "Resp:");
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 00DD         glcd_outtextxy(0, 20, response); // Display the received response for debugging
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 00DE         delay_ms(3000);
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 00DF 
; 0000 00E0         // Check if the response contains the IP address part
; 0000 00E1         if (strstr(response, "+SAPBR: 1,1,") != NULL) {
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 00E2             char* token = strtok(response, "\"");
; 0000 00E3             token = strtok(NULL, "\"");
;PCODE: $000001CA VOL: 0
;	at_command -> Y+102
;	response -> Y+2
;	*token -> Y+0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 00E4 
; 0000 00E5             if (token) {
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 00E6                 strcpy(ip_address_buffer, token);
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 00E7                 return 1; // Success
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 00E8             }
; 0000 00E9         }
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 00EA     }
;PCODE: $000001E4 VOL: 0
; 0000 00EB 
; 0000 00EC     // If we reach here, it means getting the IP address failed
; 0000 00ED     return 0; // Failure
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 00EE }
;PCODE: $000001E9 VOL: 0

	.DSEG
_0x14:
	.BYTE 0x78
;
;
;
;
;char get_key(void)
; 0000 00F4 {

	.CSEG
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 00F5     unsigned char row, col;
; 0000 00F6     const unsigned char column_pins[3] = {COL1_PIN, COL2_PIN, COL3_PIN};
; 0000 00F7     const unsigned char row_pins[4] = {ROW1_PIN, ROW2_PIN, ROW3_PIN, ROW4_PIN};
; 0000 00F8 
; 0000 00F9     const char key_map[4][3] = {
; 0000 00FA         {'1', '2', '3'},
; 0000 00FB         {'4', '5', '6'},
; 0000 00FC         {'7', '8', '9'},
; 0000 00FD         {'*', '0', '#'}
; 0000 00FE     };
; 0000 00FF 
; 0000 0100     for (col = 0; col < 3; col++)
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;	row -> R17
;	col -> R16
;	column_pins -> Y+18
;	row_pins -> Y+14
;	key_map -> Y+2
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 0101     {
; 0000 0102         KEYPAD_PORT |= (1 << COL1_PIN) | (1 << COL2_PIN) | (1 << COL3_PIN);
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0103         KEYPAD_PORT &= ~(1 << column_pins[col]);
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0104 
; 0000 0105         for (row = 0; row < 4; row++)
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 0106         {
; 0000 0107             if (!(KEYPAD_PIN & (1 << row_pins[row])))
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0108             {
; 0000 0109                 delay_ms(10);
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 010A 
; 0000 010B                 if (!(KEYPAD_PIN & (1 << row_pins[row])))
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 010C                 {
; 0000 010D                     while (!(KEYPAD_PIN & (1 << row_pins[row])));
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 010E                     return key_map[row][col];
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 010F                 }
; 0000 0110             }
;PCODE: $00000250 VOL: 0
; 0000 0111         }
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 0112     }
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 0113 
; 0000 0114     // C?? ??? ???I? ?O?I? ?OI? E?I? ??IC? ??? (NULL) ?C E???IC?
; 0000 0115     return 0;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 0116 }
;PCODE: $00000263 VOL: 0
;
;
;
;
;void activate_motor(int product_id)
; 0000 011C {
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 011D     unsigned char motor_pin;
; 0000 011E     char motor_msg[20];
; 0000 011F 
; 0000 0120     switch (product_id)
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;	product_id -> Y+21
;	motor_pin -> R17
;	motor_msg -> Y+1
;PCODE: $00000269 VOL: 0
; 0000 0121     {
; 0000 0122         case 1: motor_pin = MOTOR_PIN_1; break;
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 0123         case 2: motor_pin = MOTOR_PIN_2; break;
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 0124         case 3: motor_pin = MOTOR_PIN_3; break;
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 0125         default: return;
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 0126     }
;PCODE: $00000280 VOL: 0
; 0000 0127 
; 0000 0128     sprintf(motor_msg, "MOTOR %d ON!", product_id);
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 0129     glcd_clear();
;PCODE: $0000028D VOL: 0
; 0000 012A     glcd_outtextxy(10, 20, motor_msg);
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 012B     MOTOR_PORT |= (1 << motor_pin);
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 012C     delay_ms(10000);
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 012D     MOTOR_PORT &= ~(1 << motor_pin);
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 012E 
; 0000 012F     sprintf(motor_msg, "MOTOR %d OFF!", product_id);
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 0130     glcd_outtextxy(10, 40, motor_msg);
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0000 0131     delay_ms(2000);
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 0132 }
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;
;///////////////////////////////////////////////////////////////////////////////////
;
;void main(void)
; 0000 0137 {
;PCODE: $000002BE VOL: 0
; 0000 0138     GLCDINIT_t glcd_init_data;
; 0000 0139 
; 0000 013A     // --- C?? EIO ??IC?I?? C???? ???E??C ? USART C?E ?? C? ?I I?IEC? ??? OI? ---
; 0000 013B     // --- ? ???? C?E. ??C?? E? EU??? A? ???E.                             ---
; 0000 013C     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000002BF VOL: 0
;	glcd_init_data -> Y+0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 013D     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 013E     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 013F     PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 0140     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0141     PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 0142     DDRE=(0<<DDE7) | (0<<DDE6) | (1<<DDE5) | (1<<DDE4) | (1<<DDE3) | (1<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 0143     PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 0144     DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 0145     PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 0146     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0147     UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 0148     UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 0149     UBRR0H=0x00;
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 014A     UBRR0L=0x33; // 9600 Baud Rate for 8MHz clock
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 014B     MCUCSR = (1 << JTD);
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 014C     MCUCSR = (1 << JTD);
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 014D     glcd_init_data.font=font5x7;
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 014E     glcd_init_data.readxmem=NULL;
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 014F     glcd_init_data.writexmem=NULL;
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 0150     glcd_init(&glcd_init_data);
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 0151     glcd_setfont(font5x7);
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 0152     // --- ?C?C? EIO ??IC?I?? C???? ---
; 0000 0153 
; 0000 0154     glcd_clear();
;PCODE: $000002ED VOL: 0
; 0000 0155     glcd_outtextxy(0, 0, "Module Init...");
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 0156     delay_ms(1000);
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 0157 
; 0000 0158     send_at_command("ATE0");
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 0159     delay_ms(500);
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0000 015A     send_at_command("AT");
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 015B     delay_ms(500);
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 015C 
; 0000 015D     if (!init_sms()) { glcd_outtextxy(0, 10, "SMS Init Failed!"); while(1); }
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0000 015E     if (!init_GPRS()) { glcd_outtextxy(0, 10, "GPRS Init Failed!"); while(1); }
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
; 0000 015F 
; 0000 0160     glcd_clear();
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0000 0161     glcd_outtextxy(0, 0, "System Ready.");
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 0162     glcd_outtextxy(0, 10, "Waiting for SMS...");
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 0163 
; 0000 0164     while (1)
;PCODE: $0000032C VOL: 0
; 0000 0165     {
; 0000 0166         char sms_char;
; 0000 0167         char key_pressed;
; 0000 0168         char display_buffer[2] = {0};
; 0000 0169         int product_id = 0;
; 0000 016A 
; 0000 016B         memset(header_buffer, 0, sizeof(header_buffer));
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;	glcd_init_data -> Y+6
;	sms_char -> Y+5
;	key_pressed -> Y+4
;	display_buffer -> Y+2
;	product_id -> Y+0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0000 016C 
; 0000 016D         if (gets(header_buffer, sizeof(header_buffer)))
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0000 016E         {
; 0000 016F             if (strstr(header_buffer, "+CMT:") != NULL)
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
; 0000 0170             {
; 0000 0171                 char* token;
; 0000 0172                 token = strtok(header_buffer, "\"");
;PCODE: $0000034B VOL: 0
;	glcd_init_data -> Y+8
;	sms_char -> Y+7
;	key_pressed -> Y+6
;	display_buffer -> Y+4
;	product_id -> Y+2
;	*token -> Y+0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 0173                 if (token != NULL) {
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 0174                     token = strtok(NULL, "\"");
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 0175                     if (token != NULL) {
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 0176                         strcpy(phone_number, token);
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0000 0177 
; 0000 0178                         // ===== »Œ‘ «’·Ì: »——”Ì „ÃÊ“ =====
; 0000 0179                         if (check_authorization_post(phone_number))
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0000 017A                         {
; 0000 017B                             // ò«—»— „Ã«“ «” ° «œ«„Â ›—«Ì‰œ...
; 0000 017C                             memset(content_buffer, 0, sizeof(content_buffer));
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0000 017D                             gets(content_buffer, sizeof(content_buffer)); // ŒÊ«‰œ‰ „ ‰ ÅÌ«„ò
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0000 017E 
; 0000 017F                             if (strlen(content_buffer) > 0)
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
; 0000 0180                             {
; 0000 0181                                 sms_char = content_buffer[0];
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0000 0182 
; 0000 0183                                 if (sms_char == '1' || sms_char == '2' || sms_char == '3')
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
; 0000 0184                                 {
; 0000 0185                                     int timeout_counter = 0;
; 0000 0186                                     glcd_clear();
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;	glcd_init_data -> Y+10
;	sms_char -> Y+9
;	key_pressed -> Y+8
;	display_buffer -> Y+6
;	product_id -> Y+4
;	*token -> Y+2
;	timeout_counter -> Y+0
;PCODE: $00000388 VOL: 0
; 0000 0187                                     glcd_outtextxy(0, 5, "SMS Code:");
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
; 0000 0188                                     display_buffer[0] = sms_char;
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0000 0189                                     glcd_outtextxy(70, 5, display_buffer);
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 018A                                     glcd_outtextxy(0, 25, "Enter code on keypad:");
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
; 0000 018B 
; 0000 018C                                     for(timeout_counter = 0; timeout_counter < 200; timeout_counter++)
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 018D                                     {
; 0000 018E                                        key_pressed = get_key();
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
; 0000 018F                                        if(key_pressed != 0) break; // C?? ???I? ?O?I? OI? C? ???? IC?? O?
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
; 0000 0190                                        delay_ms(10);
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
; 0000 0191                                     }
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
; 0000 0192 
; 0000 0193                                     // C?? ?? C? ? EC??? ???I? ?O?I? ?OI
; 0000 0194                                     if(key_pressed == 0) {
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0000 0195                                         glcd_clear();
;PCODE: $000003BC VOL: 0
; 0000 0196                                         glcd_outtextxy(10, 25, "Timeout! Try again.");
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0000 0197                                         delay_ms(1000);
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0000 0198                                         glcd_clear();
;PCODE: $000003C6 VOL: 0
; 0000 0199                                         glcd_outtextxy(0, 0, "System Ready.");
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
; 0000 019A                                         glcd_outtextxy(0, 10, "Waiting for SMS...");
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
; 0000 019B                                         continue; // E??C?? ?C E? CEEIC? ???? while(1) E???IC?
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
; 0000 019C                                     }
; 0000 019D 
; 0000 019E                                     glcd_outtextxy(0, 45, "You pressed:");
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 019F                                     display_buffer[0] = key_pressed;
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0000 01A0                                     glcd_outtextxy(90, 45, display_buffer);
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0000 01A1                                     delay_ms(1000);
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
; 0000 01A2 
; 0000 01A3                                     if (key_pressed == sms_char)
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
; 0000 01A4                                     {
; 0000 01A5                                         glcd_clear();
;PCODE: $000003ED VOL: 0
; 0000 01A6                                         glcd_outtextxy(10, 25, "Code is CORRECT!");
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
; 0000 01A7                                         delay_ms(1500);
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
; 0000 01A8                                         product_id = sms_char - '0';
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
; 0000 01A9                                         activate_motor(product_id);
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
; 0000 01AA                                     }
; 0000 01AB                                     else
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0000 01AC                                     {
; 0000 01AD                                         glcd_clear();
;PCODE: $000003FF VOL: 0
; 0000 01AE                                         glcd_outtextxy(5, 25, "Error in entry!");
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 01AF                                         delay_ms(2000);
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
; 0000 01B0                                     }
;PCODE: $00000409 VOL: 0
; 0000 01B1                                 }
;PCODE: $0000040A VOL: 0
; 0000 01B2                                 else {
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
; 0000 01B3                                      glcd_clear();
;PCODE: $0000040D VOL: 0
; 0000 01B4                                      glcd_outtextxy(5, 25, "Invalid SMS Code!");
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0000 01B5                                      delay_ms(2000);
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
; 0000 01B6                                 }
;PCODE: $00000417 VOL: 0
; 0000 01B7                             }
; 0000 01B8                         }
;PCODE: $00000418 VOL: 0
; 0000 01B9                         else
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
; 0000 01BA                         {
; 0000 01BB                              // «ê—  «»⁄ check_authorization „ﬁœ«— 0 »—ê—œ«‰œ
; 0000 01BC                              glcd_clear();
;PCODE: $0000041B VOL: 0
; 0000 01BD                              glcd_outtextxy(0, 25, "You are not authorized!");
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
; 0000 01BE                              delay_ms(2500);
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
; 0000 01BF                         }
;PCODE: $00000425 VOL: 0
; 0000 01C0                     }
; 0000 01C1                 }
;PCODE: $00000426 VOL: 0
; 0000 01C2 
; 0000 01C3                 glcd_clear();
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
; 0000 01C4                 glcd_outtextxy(0, 0, "System Ready.");
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
; 0000 01C5                 glcd_outtextxy(0, 10, "Waiting for SMS...");
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 01C6             }
;PCODE: $00000437 VOL: 0
; 0000 01C7         }
;PCODE: $00000438 VOL: 0
; 0000 01C8     }
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
; 0000 01C9 }
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0

	.DSEG
_0x2B:
	.BYTE 0x12F

;#include <mega64a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <glcd.h>
;#include <font5x7.h>
;#include <stdio.h>
;#include <string.h> // E?C? ?C? EC ?OE???C
;#include <stdlib.h> // E?C? E?CE? ???? ?C??I rand() ? atoi
;
;
;// =================================================================
;// ===== E?U??CE GPRS? ???? ? ?IE?C??C? (C?? EIO ?C ???C?O ???I) ===========
;// =================================================================
;#define APN "mtnirancell"
;#define SERVER_URL "http://192.168.1.100:8080/api/data" // AI?? IP ???? O?C
;//#define SERVER_PORT "8080" // O?C?? ???E ???? O?C
;#define DEVICE_ID 1 // O?C?? ECEE I?E?C? O?C
;
;
;
;// --- E???? ???E ? ??? ??E?? ---
;#define MOTOR_DDR DDRE
;#define MOTOR_PORT PORTE
;#define MOTOR_PIN_1 2
;#define MOTOR_PIN_2 3
;#define MOTOR_PIN_3 4
;#define MOTOR_PIN_4 5
;// =================================================================
;
;// ... (EIO EC???C? ??C???? E?C??? ????I ? E?CE? get_key, send_at_command, get_full_response EI?? EU???) ...
;//char response_buffer[256];
;char sender_number[20];
;//char sms_content[100];
;char formatted_phone_number[15]; // E?C? ?I??? O?C?? ??EC?? EI?? +98 ?C 0
;
;
;//  €ÌÌ— «‰œ«“Â »«›—Â«
;#define RESP_BUF_SIZE 512
;char response_buffer[RESP_BUF_SIZE];
;
;#define HEADER_BUF_SIZE 256
;char header_copy[HEADER_BUF_SIZE];
;
;#define SMS_CONTENT_SIZE 160
;char sms_content[SMS_CONTENT_SIZE];
;
;// E???? ???E C E?C? ????I
;#define KEYPAD_PORT PORTC
;#define KEYPAD_DDR DDRC
;#define KEYPAD_PIN PINC
;
;// E???? ?????C? ?E?? (I????)
;#define COL1_PIN 0
;#define COL2_PIN 1
;#define COL3_PIN 2
;
;// E???? ?????C? ??? (???I?) - E? ???E ?C??EE
;#define ROW1_PIN 7
;#define ROW2_PIN 5
;#define ROW3_PIN 6
;#define ROW4_PIN 4
;
;char pressed_key;
;
;// ECE? E?C? I?C?I? ???I ?O?I? OI? (???? C??? ?E??)
;char get_key(void)
; 0000 0042 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0043 unsigned char row, col;
; 0000 0044 
; 0000 0045 // A?C????C?? E?C? ?I???E ?????C? ?C??EE
; 0000 0046 const unsigned char column_pins[3] = {COL1_PIN, COL2_PIN, COL3_PIN};
; 0000 0047 const unsigned char row_pins[4] = {ROW1_PIN, ROW2_PIN, ROW3_PIN, ROW4_PIN};
; 0000 0048 
; 0000 0049 // A?C?? E?C? ??COE ?C?C?E??C? ????I
; 0000 004A const char key_map[4][3] = {
; 0000 004B {'1', '2', '3'},
; 0000 004C {'4', '5', '6'},
; 0000 004D {'7', '8', '9'},
; 0000 004E {'*', '0', '#'}
; 0000 004F };
; 0000 0050 
; 0000 0051 // ???? C???: C??? ?E????C
; 0000 0052 for (col = 0; col < 3; col++)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;	row -> R17
;	col -> R16
;	column_pins -> Y+18
;	row_pins -> Y+14
;	key_map -> Y+2
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0053 {
; 0000 0054 // ??? ?E????C ?C ?? ??????? (?C E? ?C?E C??IC?? EC?C ???E???)
; 0000 0055 KEYPAD_PORT |= (1 << COL1_PIN) | (1 << COL2_PIN) | (1 << COL3_PIN);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0056 
; 0000 0057 // ?E?? ???? ?C ??? ??????? EC ??C? O?I
; 0000 0058 KEYPAD_PORT &= ~(1 << column_pins[col]);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0059 
; 0000 005A // ????C ?C E?C? EOI?? ???I ?O?I? OI? E???? ???????
; 0000 005B for (row = 0; row < 4; row++)
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 005C {
; 0000 005D // C?? ?? ??? ??? E? IC?? ?E?? ??C?? ??? OI? ECOI
; 0000 005E if (!(KEYPAD_PIN & (1 << row_pins[row])))
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 005F {
; 0000 0060 // E?C? ??? ???? (Debouncing)
; 0000 0061 delay_ms(10);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0062 
; 0000 0063 // I?EC?? ?? ??????? EC C? ?O?I? ???I ????? O???
; 0000 0064 if (!(KEYPAD_PIN & (1 << row_pins[row])))
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0065 {
; 0000 0066 // ??EU? ????C??? EC ?C?E? I?E I?I ?C C? ??? ???I E?IC?I
; 0000 0067 while (!(KEYPAD_PIN & (1 << row_pins[row])));
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0068 
; 0000 0069 // ?C?C?E? ??E??? ?C E??????IC???
; 0000 006A return key_map[row][col];
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 006B }
; 0000 006C }
;PCODE: $00000073 VOL: 0
; 0000 006D }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 006E }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 006F 
; 0000 0070 // C?? ??? ???I? ?O?I? ?OI? E?I? ??IC? ??? (NULL) ?C E???IC?
; 0000 0071 return 0;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0072 }
;PCODE: $00000086 VOL: 0
;
;
;void send_at_command(char *command)
; 0000 0076 {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0077 printf("%s\r\n", command);
;PCODE: $00000089 VOL: 0
;	*command -> Y+0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0078 }
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;
;void get_full_response(unsigned int timeout_ms)
; 0000 007B {
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 007C     char line_buffer[128];
; 0000 007D     unsigned long int counter = 0;
; 0000 007E     memset(response_buffer, 0, sizeof(response_buffer));
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;	timeout_ms -> Y+132
;	line_buffer -> Y+4
;	counter -> Y+0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 007F     while(counter < timeout_ms)
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0080     {
; 0000 0081         if (gets(line_buffer, sizeof(line_buffer)))
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0082         {
; 0000 0083             strncat(response_buffer, line_buffer, sizeof(response_buffer) - strlen(response_buffer) - 1);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0084             strncat(response_buffer, "\n", sizeof(response_buffer) - strlen(response_buffer) - 1);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0085 
; 0000 0086             // ‘—ÿ "+CMT:" «“ «Ì‰Ã« Õ–› ‘œÂ «” 
; 0000 0087             if (strstr(line_buffer, "OK") || strstr(line_buffer, "ERROR") ||
; 0000 0088                 strstr(line_buffer, ">") || strstr(line_buffer, "DOWNLOAD") ||
; 0000 0089                 strstr(line_buffer, "SEND OK") || strstr(line_buffer, "CLOSE OK") ||
; 0000 008A                 strstr(line_buffer, "+HTTPACTION"))
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 008B             {
; 0000 008C                 break;
;PCODE: $000000FE VOL: 0
; 0000 008D             }
; 0000 008E         }
;PCODE: $000000FF VOL: 0
; 0000 008F         delay_ms(1);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0090         counter++;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0091     }
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0092 }
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0

	.DSEG
_0x13:
	.BYTE 0x33
;
;// =================================================================================
;// ===== E?CE? ?C??C?IC?? ?C??? ===================================================
;// =================================================================================
;
;// ECE? E?C? ?C??C?IC?? C???? ????? ??C??
;unsigned char init_sms(void)
; 0000 009A {

	.CSEG
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 009B glcd_clear();
;PCODE: $0000010E VOL: 0
; 0000 009C glcd_outtextxy(0, 0, "Setting SMS Mode...");
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 009D send_at_command("AT+CMGF=1");
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 009E get_full_response(1000);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 009F if (strstr(response_buffer, "OK") == NULL) return 0;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00A0 
; 0000 00A1 send_at_command("AT+CNMI=2,2,0,0,0");
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00A2 get_full_response(1000);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00A3 if (strstr(response_buffer, "OK") == NULL) return 0;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00A4 
; 0000 00A5 send_at_command("AT+CMGDA=\"DEL ALL\"");
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00A6 get_full_response(5000);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00A7 if (strstr(response_buffer, "OK") == NULL) return 0;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00A8 
; 0000 00A9 glcd_outtextxy(0, 10, "SMS Ready.");
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00AA delay_ms(1000);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00AB return 1;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00AC }
;PCODE: $0000014E VOL: 0

	.DSEG
_0x17:
	.BYTE 0x57
;
;// =================================================================================
;// ===== E?CE? C??? ???? E??C?? ====================================================
;// =================================================================================
;
;// ECE? E?C? ??C???C?? ??E?? ??E?? E? ?????
;void activate_motor(int product_id)
; 0000 00B4 {

	.CSEG
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00B5 unsigned char motor_pin;
; 0000 00B6 char motor_msg[20];
; 0000 00B7 
; 0000 00B8 switch (product_id)
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;	product_id -> Y+21
;	motor_pin -> R17
;	motor_msg -> Y+1
;PCODE: $00000154 VOL: 0
; 0000 00B9 {
; 0000 00BA case 1: motor_pin = MOTOR_PIN_1; break;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00BB case 2: motor_pin = MOTOR_PIN_2; break;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00BC case 3: motor_pin = MOTOR_PIN_3; break;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00BD default: return;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00BE }
;PCODE: $0000016B VOL: 0
; 0000 00BF 
; 0000 00C0 sprintf(motor_msg, "MOTOR %d ON!", product_id);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00C1 glcd_clear();
;PCODE: $00000178 VOL: 0
; 0000 00C2 glcd_outtextxy(10, 20, motor_msg);
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00C3 MOTOR_PORT |= (1 << motor_pin);
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00C4 delay_ms(10000);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00C5 MOTOR_PORT &= ~(1 << motor_pin);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00C6 
; 0000 00C7 sprintf(motor_msg, "MOTOR %d OFF!", product_id);
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00C8 glcd_outtextxy(10, 40, motor_msg);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00C9 delay_ms(2000);
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00CA }
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;
;
;// ECE? E?C? ?C???C?? O?C?? ??EC??
;void format_phone_number(char* raw_number)
; 0000 00CF {
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 00D0 if (strncmp(raw_number, "+98", 3) == 0) strcpy(formatted_phone_number, raw_number + 3);
;PCODE: $000001AB VOL: 0
;	*raw_number -> Y+0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 00D1 else if (raw_number[0] == '0') strcpy(formatted_phone_number, raw_number + 1);
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 00D2 else strcpy(formatted_phone_number, raw_number);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 00D3 }
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0

	.DSEG
_0x23:
	.BYTE 0x4
;
;//////////////////////////////////////////////////////////////////////////////////////
;
;void process_sms(void) {
; 0000 00D7 void process_sms(void) {

	.CSEG
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 00D8     char header_copy[256];
; 0000 00D9     char *line1, *line2;
; 0000 00DA     char *token, *end_quote;
; 0000 00DB     int product_id;
; 0000 00DC 
; 0000 00DD     // »——”Ì «Ì‰òÂ ÅÌ«„ œ—Ì«› Ì ‘«„· +CMT: Â” 
; 0000 00DE     if (strstr(response_buffer, "+CMT:") != NULL) {
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;	header_copy -> Y+10
;	*line1 -> R16,R17
;	*line2 -> R18,R19
;	*token -> R20,R21
;	*end_quote -> Y+8
;	product_id -> Y+6
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 00DF         // Ìò òÅÌ «“ »«›— »—«Ì Ãœ«”«“Ì ŒÿÊÿ œ—”  „Ìùò‰Ì„
; 0000 00E0         strncpy(header_copy, response_buffer, sizeof(header_copy) - 1);
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00E1         header_copy[sizeof(header_copy) - 1] = '\0';
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 00E2 
; 0000 00E3         // Ãœ« ò—œ‰ ŒÿÊÿ »« «” ›«œÂ «“ \r\n
; 0000 00E4         line1 = strtok(header_copy, "\r\n"); // Œÿ «Ê·: +CMT: "‘„«—Â",," «—ÌŒ"
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 00E5         line2 = strtok(NULL, "\r\n"); // Œÿ œÊ„: „ ‰ ÅÌ«„ò
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 00E6 
; 0000 00E7         // «” Œ—«Ã ‘„«—Â ›—” ‰œÂ «“ Œÿ «Ê·
; 0000 00E8         if (line1) {
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 00E9         token = strchr(line1, '"'); // ÅÌœ« ò—œ‰ «Ê·Ì‰ "
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 00EA         if (token) {
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 00EB         token++; // »⁄œ «“ "
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 00EC         end_quote = strchr(token, '"'); //  « œÊ„Ì‰ "
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 00ED         if (end_quote) {
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 00EE         *end_quote = '\0'; // Å«Ì«‰ —‘ Â ‘„«—Â
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 00EF         strcpy(sender_number, token); // –ŒÌ—Â ‘„«—Â ›—” ‰œÂ
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 00F0         }
; 0000 00F1         }
;PCODE: $00000207 VOL: 0
; 0000 00F2         }
;PCODE: $00000208 VOL: 0
; 0000 00F3 
; 0000 00F4         // «” Œ—«Ã „ ‰ ÅÌ«„ò «“ Œÿ œÊ„
; 0000 00F5         if (line2) {
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 00F6         strncpy(sms_content, line2, sizeof(sms_content) - 1);
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 00F7         sms_content[sizeof(sms_content) - 1] = '\0';
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 00F8         } else {
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 00F9         sms_content[0] = '\0'; // «ê— Œÿ œÊ„ „ÊÃÊœ ‰»Êœ
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 00FA         }
;PCODE: $00000218 VOL: 0
; 0000 00FB 
; 0000 00FC         // ‰„«Ì‘ œ— GLCD
; 0000 00FD         glcd_clear();
;PCODE: $00000219 VOL: 0
; 0000 00FE         glcd_outtextxy(0, 0, "Payamak Jadid:");
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 00FF         glcd_outtextxy(0, 10, "From:");
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0100         glcd_outtextxy(0, 20, sender_number);
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 0101         delay_ms(1000);
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 0102 
; 0000 0103         glcd_clear();
;PCODE: $00000230 VOL: 0
; 0000 0104         glcd_outtextxy(0, 0, "Mohtava:");
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 0105         glcd_outtextxy(0, 10, sms_content);
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0106         delay_ms(5000);
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 0107 
; 0000 0108         // Å—œ«“‘ „Õ Ê«Ì ÅÌ«„ò »Âù⁄‰Ê«‰ ⁄œœ
; 0000 0109         product_id = atoi(sms_content);
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 010A         if (product_id >= 1 && product_id <= 3) {
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 010B         activate_motor(product_id);
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 010C         } else {
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 010D         glcd_clear();
;PCODE: $00000251 VOL: 0
; 0000 010E         glcd_outtextxy(0, 10, "Adad Mo'tabar Nist!");
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 010F         delay_ms(2000);
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 0110         }
;PCODE: $0000025B VOL: 0
; 0000 0111 
; 0000 0112         // Õ–› ÅÌ«„ò ŒÊ«‰œÂù‘œÂ «“ Õ«›ŸÂ
; 0000 0113         send_at_command("AT+CMGDA=\"DEL READ\"");
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 0114         get_full_response(2000);
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 0115     }
; 0000 0116 }
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0

	.DSEG
_0x28:
	.BYTE 0x4C
;
;
;
;
;// =================================================================================
;// ===== ECE? C??? E??C?? (main) ===================================================
;// =============================================================================
;
;
;
;void main(void)
; 0000 0122 {

	.CSEG
;PCODE: $00000266 VOL: 0
; 0000 0123 
; 0000 0124     // Declare your local variables here
; 0000 0125     // Variable used to store graphic display
; 0000 0126     // controller initialization data
; 0000 0127     GLCDINIT_t glcd_init_data;
; 0000 0128 
; 0000 0129     // Input/Output Ports initialization
; 0000 012A     // Port A initialization
; 0000 012B     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 012C     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000267 VOL: 0
;	glcd_init_data -> Y+0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 012D     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 012E     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 012F 
; 0000 0130     // Port B initialization
; 0000 0131     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0132     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 0133     // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0134     PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 0135 
; 0000 0136     // Port C initialization
; 0000 0137     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 0138     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 0139     // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=T Bit2=0 Bit1=0 Bit0=0
; 0000 013A     PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 013B 
; 0000 013C     // Port D initialization
; 0000 013D     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 013E     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 013F     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0140     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 0141 
; 0000 0142     // Port E initialization
; 0000 0143     // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=In Bit0=In
; 0000 0144     DDRE=(0<<DDE7) | (0<<DDE6) | (1<<DDE5) | (1<<DDE4) | (1<<DDE3) | (1<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 0145     // State: Bit7=T Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=T Bit0=T
; 0000 0146     PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 0147 
; 0000 0148     // Port F initialization
; 0000 0149     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 014A     DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 014B     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 014C     PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 014D 
; 0000 014E     // Port G initialization
; 0000 014F     // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0150     DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 0151     // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0152     PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 0153 
; 0000 0154     // Timer/Counter 0 initialization
; 0000 0155     // Clock source: System Clock
; 0000 0156     // Clock value: Timer 0 Stopped
; 0000 0157     // Mode: Normal top=0xFF
; 0000 0158     // OC0 output: Disconnected
; 0000 0159     ASSR=0<<AS0;
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 015A     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 015B     TCNT0=0x00;
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 015C     OCR0=0x00;
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 015D 
; 0000 015E     // Timer/Counter 1 initialization
; 0000 015F     // Clock source: System Clock
; 0000 0160     // Clock value: Timer1 Stopped
; 0000 0161     // Mode: Normal top=0xFFFF
; 0000 0162     // OC1A output: Disconnected
; 0000 0163     // OC1B output: Disconnected
; 0000 0164     // OC1C output: Disconnected
; 0000 0165     // Noise Canceler: Off
; 0000 0166     // Input Capture on Falling Edge
; 0000 0167     // Timer1 Overflow Interrupt: Off
; 0000 0168     // Input Capture Interrupt: Off
; 0000 0169     // Compare A Match Interrupt: Off
; 0000 016A     // Compare B Match Interrupt: Off
; 0000 016B     // Compare C Match Interrupt: Off
; 0000 016C     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 016D     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 016E     TCNT1H=0x00;
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 016F     TCNT1L=0x00;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 0170     ICR1H=0x00;
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 0171     ICR1L=0x00;
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 0172     OCR1AH=0x00;
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 0173     OCR1AL=0x00;
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 0174     OCR1BH=0x00;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 0175     OCR1BL=0x00;
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 0176     OCR1CH=0x00;
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0177     OCR1CL=0x00;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 0178 
; 0000 0179     // Timer/Counter 2 initialization
; 0000 017A     // Clock source: System Clock
; 0000 017B     // Clock value: Timer2 Stopped
; 0000 017C     // Mode: Normal top=0xFF
; 0000 017D     // OC2 output: Disconnected
; 0000 017E     TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 017F     TCNT2=0x00;
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 0180     OCR2=0x00;
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 0181 
; 0000 0182     // Timer/Counter 3 initialization
; 0000 0183     // Clock source: System Clock
; 0000 0184     // Clock value: Timer3 Stopped
; 0000 0185     // Mode: Normal top=0xFFFF
; 0000 0186     // OC3A output: Disconnected
; 0000 0187     // OC3B output: Disconnected
; 0000 0188     // OC3C output: Disconnected
; 0000 0189     // Noise Canceler: Off
; 0000 018A     // Input Capture on Falling Edge
; 0000 018B     // Timer3 Overflow Interrupt: Off
; 0000 018C     // Input Capture Interrupt: Off
; 0000 018D     // Compare A Match Interrupt: Off
; 0000 018E     // Compare B Match Interrupt: Off
; 0000 018F     // Compare C Match Interrupt: Off
; 0000 0190     TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 0191     TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 0192     TCNT3H=0x00;
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 0193     TCNT3L=0x00;
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 0194     ICR3H=0x00;
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 0195     ICR3L=0x00;
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 0196     OCR3AH=0x00;
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 0197     OCR3AL=0x00;
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 0198     OCR3BH=0x00;
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 0199     OCR3BL=0x00;
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 019A     OCR3CH=0x00;
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 019B     OCR3CL=0x00;
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 019C 
; 0000 019D     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 019E     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 019F     ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 01A0 
; 0000 01A1     // External Interrupt(s) initialization
; 0000 01A2     // INT0: Off
; 0000 01A3     // INT1: Off
; 0000 01A4     // INT2: Off
; 0000 01A5     // INT3: Off
; 0000 01A6     // INT4: Off
; 0000 01A7     // INT5: Off
; 0000 01A8     // INT6: Off
; 0000 01A9     // INT7: Off
; 0000 01AA     EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 01AB     EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 01AC     EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 01AD 
; 0000 01AE     // USART0 initialization
; 0000 01AF     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01B0     // USART0 Receiver: On
; 0000 01B1     // USART0 Transmitter: On
; 0000 01B2     // USART0 Mode: Asynchronous
; 0000 01B3     // USART0 Baud Rate: 9600
; 0000 01B4     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 01B5     UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 01B6     UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 01B7     UBRR0H=0x00;
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 01B8     UBRR0L=0x33;
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 01B9 
; 0000 01BA     // USART1 initialization
; 0000 01BB     // USART1 disabled
; 0000 01BC     UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 01BD 
; 0000 01BE     // Analog Comparator initialization
; 0000 01BF     // Analog Comparator: Off
; 0000 01C0     // The Analog Comparator's positive input is
; 0000 01C1     // connected to the AIN0 pin
; 0000 01C2     // The Analog Comparator's negative input is
; 0000 01C3     // connected to the AIN1 pin
; 0000 01C4     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 01C5     SFIOR=(0<<ACME);
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 01C6 
; 0000 01C7     // ADC initialization
; 0000 01C8     // ADC disabled
; 0000 01C9     ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 01CA 
; 0000 01CB     // SPI initialization
; 0000 01CC     // SPI disabled
; 0000 01CD     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 01CE 
; 0000 01CF     // TWI initialization
; 0000 01D0     // TWI disabled
; 0000 01D1     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 01D2     // ----- U????C? ??I? JTAG (E?C? C?E?CI? C? ???E??C? C ? F I? ???E ??C?) -----
; 0000 01D3     MCUCSR = (1 << JTD);
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 01D4     MCUCSR = (1 << JTD);
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 01D5     // Graphic Display Controller initialization
; 0000 01D6     // The KS0108 connections are specified in the
; 0000 01D7     // Project|Configure|C Compiler|Libraries|Graphic Display menu:
; 0000 01D8     // DB0 - PORTA Bit 0
; 0000 01D9     // DB1 - PORTA Bit 1
; 0000 01DA     // DB2 - PORTA Bit 2
; 0000 01DB     // DB3 - PORTA Bit 3
; 0000 01DC     // DB4 - PORTA Bit 4
; 0000 01DD     // DB5 - PORTA Bit 5
; 0000 01DE     // DB6 - PORTA Bit 6
; 0000 01DF     // DB7 - PORTA Bit 7
; 0000 01E0     // E - PORTF Bit 4
; 0000 01E1     // RD /WR - PORTF Bit 3
; 0000 01E2     // RS - PORTF Bit 2
; 0000 01E3     // /RST - PORTF Bit 7
; 0000 01E4     // CS1 - PORTF Bit 5
; 0000 01E5     // CS2 - PORTF Bit 6
; 0000 01E6 
; 0000 01E7     // ??IC?I?? C???? E???I ???I? C?ICI E?CI??
; 0000 01E8     // E?C? E?CI?? E?I? E?OE?? ???E?C? C? ??IC? ?? EC??? A?CI C?E?CI? ??I
; 0000 01E9     // srand(TCNT0);
; 0000 01EA     srand(TCNT0); // ?? ??O C?EC?IC?I ??? ???? C?E I? ??? ?C??C????C? embedded ?C? ???I
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 01EB     // C?E?CI? C? rand() E? E??C?? ?? E?C? O??? ?C?? C?E.
; 0000 01EC 
; 0000 01ED     // Specify the current font for displaying text
; 0000 01EE     glcd_init_data.font=font5x7;
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 01EF     // No function is used for reading
; 0000 01F0     // image data from external memory
; 0000 01F1     glcd_init_data.readxmem=NULL;
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 01F2     // No function is used for writing
; 0000 01F3     // image data to external memory
; 0000 01F4     glcd_init_data.writexmem=NULL;
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 01F5 
; 0000 01F6     glcd_init(&glcd_init_data);
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 01F7 
; 0000 01F8 
; 0000 01F9     glcd_setfont(font5x7);
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 01FA 
; 0000 01FB 
; 0000 01FC     // ----- —«Âù«‰œ«“Ì „«éÊ· SIM800 -----
; 0000 01FD     glcd_clear();
;PCODE: $000002F5 VOL: 0
; 0000 01FE     glcd_outtextxy(0, 0, "Module Init...");
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 01FF     delay_ms(1000);
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 0200 
; 0000 0201     send_at_command("ATE0"); get_full_response(1000);
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0000 0202     send_at_command("AT"); get_full_response(1000);
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 0203     if(strstr(response_buffer, "OK") == NULL) { glcd_outtextxy(0, 10, "Module Not Found!"); while(1); }
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 0204 
; 0000 0205     // ----- —«Âù«‰œ«“Ì ”—ÊÌ”ùÂ«Ì ÅÌ«„ò Ê HTTP -----
; 0000 0206     if (!init_sms()) { glcd_outtextxy(0, 10, "SMS Init Failed!"); while(1); }
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0000 0207     //if (!init_http_bearer()) { glcd_outtextxy(0, 10, "HTTP Bearer Failed!"); while(1); }
; 0000 0208 
; 0000 0209     glcd_clear();
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 020A     glcd_outtextxy(0, 0, "System Ready.");
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
; 0000 020B     glcd_outtextxy(0, 10, "Waiting for SMS...");
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0000 020C 
; 0000 020D     // ----- Õ·ﬁÂ «’·Ì »—‰«„Â -----
; 0000 020E 
; 0000 020F     // main loop
; 0000 0210 while (1)
;PCODE: $00000338 VOL: 0
; 0000 0211 {
; 0000 0212     char *p;  //  ⁄—Ì› „ €Ì— œ— «» œ«Ì »·«ò
; 0000 0213     int line;
; 0000 0214 
; 0000 0215     memset(response_buffer, 0, sizeof(response_buffer));
;PCODE: $00000339 VOL: 0
;	glcd_init_data -> Y+4
;	*p -> Y+2
;	line -> Y+0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0000 0216     get_full_response(5000);  // “„«‰ »Ì‘ — »—«Ì œ—Ì«›  ÅÌ«„ò
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
; 0000 0217 
; 0000 0218     if (strlen(response_buffer) > 0)
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0000 0219     {
; 0000 021A         glcd_clear();
;PCODE: $00000346 VOL: 0
; 0000 021B         glcd_outtextxy(0, 0, "Received:");
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0000 021C 
; 0000 021D         p = response_buffer; // „ﬁœ«—œÂÌ »⁄œ «“  ⁄—Ì›
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0000 021E         line = 10;
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 021F         while (*p && line < 40)
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 0220         {
; 0000 0221             char temp_line[21] = {0};
; 0000 0222             int i = 0;
; 0000 0223             while (*p && *p != '\n' && i < 20)
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;	glcd_init_data -> Y+27
;	*p -> Y+25
;	line -> Y+23
;	temp_line -> Y+2
;	i -> Y+0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 0224             {
; 0000 0225                 temp_line[i++] = *p++;
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
; 0000 0226             }
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
; 0000 0227             temp_line[i] = '\0';
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 0228             if (*p == '\n') p++;
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0000 0229             glcd_outtextxy(0, line, temp_line);
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0000 022A             line += 10;
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
; 0000 022B         }
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 022C 
; 0000 022D         delay_ms(3000);
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
; 0000 022E 
; 0000 022F         process_sms();
;PCODE: $0000039C VOL: 0
; 0000 0230 
; 0000 0231         glcd_clear();
;PCODE: $0000039D VOL: 0
; 0000 0232         glcd_outtextxy(0, 0, "System Ready.");
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
; 0000 0233         glcd_outtextxy(0, 10, "Waiting for SMS...");
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 0234     }
; 0000 0235 
; 0000 0236     delay_ms(100);
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 0237 }
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
; 0000 0238 }
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0

	.DSEG
_0x32:
	.BYTE 0x89

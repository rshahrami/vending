;#include <mega64a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <glcd.h>
;#include <font5x7.h>
;#include <stdio.h>
;#include <string.h>   // »—«Ì ò«— »« —‘ ÂùÂ«
;#include <stdlib.h>   // »—«Ì  Ê«»⁄ ò„òÌ „«‰‰œ rand() Ê atoi
;
;
;// =================================================================
;// =====  ‰ŸÌ„«  GPRS° ”—Ê— Ê ”Œ ù«›“«— («Ì‰ »Œ‘ —« ÊÌ—«Ì‘ ò‰Ìœ) ===========
;// =================================================================
;#define APN "mtnirancell"
;#define SERVER_URL "http://192.168.1.100:8080/api/data" // ¬œ—” IP ”—Ê— ‘„«
;//#define SERVER_PORT "8080"         // ‘„«—Â ÅÊ—  ”—Ê— ‘„«
;#define DEVICE_ID 1                // ‘‰«”Â À«»  œ” ê«Â ‘„«
;
;
;
;// ---  ⁄—Ì› ÅÊ—  Ê ÅÌ‰ „Ê Ê— ---
;#define MOTOR_DDR  DDRE
;#define MOTOR_PORT PORTE
;#define MOTOR_PIN_1  2
;#define MOTOR_PIN_2  3
;#define MOTOR_PIN_3  4
;#define MOTOR_PIN_4  5
;// =================================================================
;
;// ... (»Œ‘ »«›—Â«Ì ”—«”—Ì°  ⁄«—Ì› òÌùÅœ Ê  Ê«»⁄ get_key, send_at_command, get_full_response »œÊ‰  €ÌÌ—) ...
;char response_buffer[256];
;char sender_number[20];
;char sms_content[100];
;char formatted_phone_number[15]; // »—«Ì –ŒÌ—Â ‘„«—Â „Ê»«Ì· »œÊ‰ +98 Ì« 0
;
;
;//  ⁄—Ì› ÅÊ—  C »—«Ì òÌùÅœ
;#define KEYPAD_PORT PORTC
;#define KEYPAD_DDR  DDRC
;#define KEYPAD_PIN  PINC
;
;//  ⁄—Ì› ÅÌ‰ùÂ«Ì ” Ê‰ (Œ—ÊÃÌ)
;#define COL1_PIN 0
;#define COL2_PIN 1
;#define COL3_PIN 2
;
;//  ⁄—Ì› ÅÌ‰ùÂ«Ì ”ÿ— (Ê—ÊœÌ) - »Â ’Ê—  ‰«„— »
;#define ROW1_PIN 7
;#define ROW2_PIN 5
;#define ROW3_PIN 6
;#define ROW4_PIN 4
;
;char pressed_key;
;
;//  «»⁄ »—«Ì ŒÊ«‰œ‰ ò·Ìœ ›‘—œÂ ‘œÂ („‰ÿﬁ «”ò‰ ” Ê‰)
;char get_key(void)
; 0000 0038 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0039     unsigned char row, col;
; 0000 003A 
; 0000 003B     // ¬—«ÌÂùÂ«ÌÌ »—«Ì „œÌ—Ì  ÅÌ‰ùÂ«Ì ‰«„— »
; 0000 003C     const unsigned char column_pins[3] = {COL1_PIN, COL2_PIN, COL3_PIN};
; 0000 003D     const unsigned char row_pins[4] = {ROW1_PIN, ROW2_PIN, ROW3_PIN, ROW4_PIN};
; 0000 003E 
; 0000 003F     // ¬—«ÌÂ »—«Ì ‰ê«‘  ò«—«ò —Â«Ì òÌùÅœ
; 0000 0040     const char key_map[4][3] = {
; 0000 0041         {'1', '2', '3'},
; 0000 0042         {'4', '5', '6'},
; 0000 0043         {'7', '8', '9'},
; 0000 0044         {'*', '0', '#'}
; 0000 0045     };
; 0000 0046 
; 0000 0047     // Õ·ﬁÂ «’·Ì: «”ò‰ ” Ê‰ùÂ«
; 0000 0048     for (col = 0; col < 3; col++)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;	row -> R17
;	col -> R16
;	column_pins -> Y+18
;	row_pins -> Y+14
;	key_map -> Y+2
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0049     {
; 0000 004A         // Â„Â ” Ê‰ùÂ« —« Ìò „Ìùò‰Ì„ (Ì« »Â Õ«·  «„Åœ«‰” »«·« „Ìù»—Ì„)
; 0000 004B         KEYPAD_PORT |= (1 << COL1_PIN) | (1 << COL2_PIN) | (1 << COL3_PIN);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 004C 
; 0000 004D         // ” Ê‰ ›⁄·Ì —« ’›— „Ìùò‰Ì„  « ›⁄«· ‘Êœ
; 0000 004E         KEYPAD_PORT &= ~(1 << column_pins[col]);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 004F 
; 0000 0050         // ”ÿ—Â« —« »—«Ì  ‘ŒÌ’ ò·Ìœ ›‘—œÂ ‘œÂ »——”Ì „Ìùò‰Ì„
; 0000 0051         for (row = 0; row < 4; row++)
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0052         {
; 0000 0053             // «ê— Ìò ÅÌ‰ ”ÿ— »Â Œ«ÿ— ” Ê‰ ›⁄«·° ’›— ‘œÂ »«‘œ
; 0000 0054             if (!(KEYPAD_PIN & (1 << row_pins[row])))
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0055             {
; 0000 0056                 // »—«Ì Õ–› ‰ÊÌ“ (Debouncing)
; 0000 0057                 delay_ms(10);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0058 
; 0000 0059                 // œÊ»«—Â çò „Ìùò‰Ì„  « «“ ›‘—œ‰ ò·Ìœ „ÿ„∆‰ ‘ÊÌ„
; 0000 005A                 if (!(KEYPAD_PIN & (1 << row_pins[row])))
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 005B                 {
; 0000 005C                     // „‰ Ÿ— „Ìù„«‰Ì„  « ò«—»— œ”  ŒÊœ —« «“ —ÊÌ ò·Ìœ »—œ«—œ
; 0000 005D                     while (!(KEYPAD_PIN & (1 << row_pins[row])));
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 005E 
; 0000 005F                     // ò«—«ò — „—»ÊÿÂ —« »—„Ìùê—œ«‰Ì„
; 0000 0060                     return key_map[row][col];
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0061                 }
; 0000 0062             }
;PCODE: $00000073 VOL: 0
; 0000 0063         }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0064     }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0065 
; 0000 0066     // «ê— ÂÌç ò·ÌœÌ ›‘—œÂ ‰‘œÂ »Êœ° „ﬁœ«— ’›— (NULL) —« »—ê—œ«‰
; 0000 0067     return 0;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0068 }
;PCODE: $00000086 VOL: 0
;
;
;void send_at_command(char *command)
; 0000 006C {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 006D     printf("%s\r\n", command);
;PCODE: $00000089 VOL: 0
;	*command -> Y+0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 006E }
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;
;//  «»⁄ »—«Ì ŒÊ«‰œ‰ ò«„· Å«”Œ «“ „«éÊ·  « —”Ìœ‰ »Â Ìò ò·„Â ò·ÌœÌ
;void get_full_response(unsigned int timeout_ms)
; 0000 0072 {
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0073     char line_buffer[128];
; 0000 0074     unsigned long int counter = 0;
; 0000 0075     memset(response_buffer, 0, sizeof(response_buffer));
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;	timeout_ms -> Y+132
;	line_buffer -> Y+4
;	counter -> Y+0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0076     while(counter < timeout_ms)
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0077     {
; 0000 0078         if (gets(line_buffer, sizeof(line_buffer)))
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0079         {
; 0000 007A             strncat(response_buffer, line_buffer, sizeof(response_buffer) - strlen(response_buffer) - 1);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 007B             strncat(response_buffer, "\n", sizeof(response_buffer) - strlen(response_buffer) - 1);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 007C             if (strstr(line_buffer, "OK") || strstr(line_buffer, "ERROR") || strstr(line_buffer, ">") || strstr(line_buf ...
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 007D             {
; 0000 007E                 break;
;PCODE: $000000FE VOL: 0
; 0000 007F             }
; 0000 0080         }
;PCODE: $000000FF VOL: 0
; 0000 0081         delay_ms(1);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0082         counter++;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0083     }
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0084 }
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0

	.DSEG
_0x13:
	.BYTE 0x33
;
;// =================================================================================
;// =====  Ê«»⁄ —«Âù«‰œ«“Ì „«éÊ· ===================================================
;// =================================================================================
;
;//  «»⁄ »—«Ì —«Âù«‰œ«“Ì «Ê·ÌÂ ”—ÊÌ” ÅÌ«„ò
;unsigned char init_sms(void)
; 0000 008C {

	.CSEG
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 008D     glcd_clear();
;PCODE: $0000010E VOL: 0
; 0000 008E     glcd_outtextxy(0, 0, "Setting SMS Mode...");
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 008F     send_at_command("AT+CMGF=1");
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0090     get_full_response(1000);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0091     if (strstr(response_buffer, "OK") == NULL) return 0;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0092 
; 0000 0093     send_at_command("AT+CNMI=2,2,0,0,0");
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0094     get_full_response(1000);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0095     if (strstr(response_buffer, "OK") == NULL) return 0;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0096 
; 0000 0097     send_at_command("AT+CMGDA=\"DEL ALL\"");
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0098     get_full_response(5000);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0099     if (strstr(response_buffer, "OK") == NULL) return 0;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 009A 
; 0000 009B     glcd_outtextxy(0, 10, "SMS Ready.");
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 009C     delay_ms(1000);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 009D     return 1;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 009E }
;PCODE: $0000014E VOL: 0

	.DSEG
_0x17:
	.BYTE 0x57
;
;// =================================================================================
;// =====  Ê«»⁄ «’·Ì „‰ÿﬁ »—‰«„Â ====================================================
;// =================================================================================
;
;//  «»⁄ »—«Ì ›⁄«·ù”«“Ì „Ê Ê— „—»Êÿ »Â „Õ’Ê·
;void activate_motor(int product_id)
; 0000 00A6 {

	.CSEG
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00A7     unsigned char motor_pin;
; 0000 00A8     char motor_msg[20];
; 0000 00A9 
; 0000 00AA     switch (product_id)
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;	product_id -> Y+21
;	motor_pin -> R17
;	motor_msg -> Y+1
;PCODE: $00000154 VOL: 0
; 0000 00AB     {
; 0000 00AC         case 1: motor_pin = MOTOR_PIN_1; break;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00AD         case 2: motor_pin = MOTOR_PIN_2; break;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00AE         case 3: motor_pin = MOTOR_PIN_3; break;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00AF         default: return;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00B0     }
;PCODE: $0000016B VOL: 0
; 0000 00B1 
; 0000 00B2     sprintf(motor_msg, "MOTOR %d ON!", product_id);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00B3     glcd_clear();
;PCODE: $00000178 VOL: 0
; 0000 00B4     glcd_outtextxy(10, 20, motor_msg);
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00B5     MOTOR_PORT |= (1 << motor_pin);
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00B6     delay_ms(10000);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00B7     MOTOR_PORT &= ~(1 << motor_pin);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00B8 
; 0000 00B9     sprintf(motor_msg, "MOTOR %d OFF!", product_id);
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00BA     glcd_outtextxy(10, 40, motor_msg);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00BB     delay_ms(2000);
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00BC }
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;
;//  «»⁄ »—«Ì ç«·‘ òœ ? —ﬁ„Ì
;void start_challenge_game(int product_id)
; 0000 00C0 {
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 00C1     int random_code;
; 0000 00C2     char random_code_str[5];
; 0000 00C3     char user_input[5] = "";
; 0000 00C4     char key;
; 0000 00C5     unsigned char digit_count = 0;
; 0000 00C6     unsigned int time_left = 300; // 30 À«‰ÌÂ
; 0000 00C7 
; 0000 00C8     random_code = 1000 + (rand() % 9000);
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;	product_id -> Y+16
;	random_code -> R16,R17
;	random_code_str -> Y+11
;	user_input -> Y+6
;	key -> R19
;	digit_count -> R18
;	time_left -> R20,R21
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 00C9     sprintf(random_code_str, "%d", random_code);
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 00CA 
; 0000 00CB     glcd_clear();
;PCODE: $000001CE VOL: 0
; 0000 00CC     glcd_outtextxy(0, 0, "Enter this code:");
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 00CD     glcd_outtextxy(30, 15, random_code_str);
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 00CE     glcd_outtextxy(0, 30, "Your input: ");
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 00CF 
; 0000 00D0     while (digit_count < 4 && time_left > 0)
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 00D1     {
; 0000 00D2         key = get_key();
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 00D3         if (key >= '0' && key <= '9')
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 00D4         {
; 0000 00D5             user_input[digit_count++] = key;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 00D6             user_input[digit_count] = '\0';
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 00D7             glcd_outtextxy(70, 30, user_input);
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 00D8         }
; 0000 00D9 
; 0000 00DA         { char time_str[10]; sprintf(time_str, "Time: %d ", time_left / 10); glcd_outtextxy(0, 50, time_str); }
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;	product_id -> Y+26
;	random_code_str -> Y+21
;	user_input -> Y+16
;	time_str -> Y+0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 00DB 
; 0000 00DC         delay_ms(100);
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 00DD         time_left--;
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 00DE     }
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 00DF 
; 0000 00E0     if (time_left == 0) { glcd_clear(); glcd_outtextxy(10, 20, "Time is up!"); delay_ms(2000); }
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 00E1     else if (strcmp(user_input, random_code_str) == 0)
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 00E2     {
; 0000 00E3         glcd_clear(); glcd_outtextxy(10, 20, "Code Correct!"); delay_ms(2000);
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 00E4         activate_motor(product_id);
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 00E5     }
; 0000 00E6     else { glcd_clear(); glcd_outtextxy(10, 20, "Wrong Code!"); delay_ms(2000); }
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 00E7 }
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0

	.DSEG
_0x22:
	.BYTE 0x44
;
;//  «»⁄ »—«Ì Å«òù”«“Ì ‘„«—Â „Ê»«Ì·
;void format_phone_number(char* raw_number)
; 0000 00EB {

	.CSEG
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 00EC     if (strncmp(raw_number, "+98", 3) == 0) strcpy(formatted_phone_number, raw_number + 3);
;PCODE: $0000025E VOL: 0
;	*raw_number -> Y+0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 00ED     else if (raw_number[0] == '0') strcpy(formatted_phone_number, raw_number + 1);
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 00EE     else strcpy(formatted_phone_number, raw_number);
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 00EF }
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0

	.DSEG
_0x30:
	.BYTE 0x4
;
;
;//  «»⁄ ÃœÌœ »—«Ì »——”Ì Ê « ’«· „Ãœœ ŒÊœò«— »Â GPRS
;unsigned char check_and_reopen_bearer(void)
; 0000 00F4 {

	.CSEG
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 00F5     glcd_clear();
;PCODE: $00000285 VOL: 0
; 0000 00F6     glcd_outtextxy(0,0,"Checking Bearer...");
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 00F7 
; 0000 00F8     send_at_command("AT+SAPBR=2,1"); // «” ⁄·«„ Ê÷⁄Ì  »” —
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 00F9     get_full_response(3000);
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 00FA 
; 0000 00FB     // «ê— œ— Å«”Œ° ¬ÌùÅÌ 0.0.0.0 ÊÃÊœ œ«‘  Ì⁄‰Ì « ’«· ﬁÿ⁄ «” 
; 0000 00FC     if(strstr(response_buffer, "0.0.0.0") || strstr(response_buffer, "ERROR"))
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 00FD     {
; 0000 00FE         glcd_outtextxy(0,10,"Bearer is down.");
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 00FF         glcd_outtextxy(0,20,"Re-opening...");
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 0100         delay_ms(1000);
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 0101 
; 0000 0102         send_at_command("AT+SAPBR=1,1"); //  ·«‘ „Ãœœ »—«Ì « ’«·
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 0103         get_full_response(15000); // “„«‰ »Ì‘ — »—«Ì  ·«‘ „Ãœœ
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0000 0104 
; 0000 0105         if(strstr(response_buffer, "OK"))
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 0106         {
; 0000 0107             glcd_outtextxy(0,30,"Re-opened OK.");
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 0108             delay_ms(1000);
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 0109             return 1; // „Ê›ﬁÌ  ¬„Ì“
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 010A         }
; 0000 010B         else
;PCODE: $000002C9 VOL: 0
; 0000 010C         {
; 0000 010D             glcd_outtextxy(0,30,"Re-open Failed!");
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 010E             delay_ms(1000);
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 010F             return 0; // ‰«„Ê›ﬁ
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 0110         }
;PCODE: $000002D5 VOL: 0
; 0000 0111     }
; 0000 0112 
; 0000 0113     glcd_outtextxy(0,10,"Bearer is Active.");
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 0114     delay_ms(1000);
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 0115     return 1; // « ’«· «“ ﬁ»· »—ﬁ—«— »Êœ
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 0116 }
;PCODE: $000002E2 VOL: 0

	.DSEG
_0x34:
	.BYTE 0x8C
;
;
;// —«Âù«‰œ«“Ì «Ê·ÌÂ »” — HTTP
;unsigned char init_http_bearer(void)
; 0000 011B {

	.CSEG
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 011C     char command[100];
; 0000 011D     glcd_clear();
;PCODE: $000002E5 VOL: 0
;	command -> Y+0
;PCODE: $000002E6 VOL: 0
; 0000 011E     glcd_outtextxy(0, 0, "Init HTTP Bearer...");
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 011F 
; 0000 0120     // çò ò—œ‰ À»  ‘œ‰ œ— ‘»òÂ „Ê»«Ì·
; 0000 0121     glcd_outtextxy(0, 10, "Checking network...");
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 0122     while(1)
;PCODE: $000002F5 VOL: 0
; 0000 0123     {
; 0000 0124         send_at_command("AT+CREG?");
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 0125         get_full_response(2000);
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 0126         // „‰ Ÿ— Å«”Œ "+CREG: 0,1" Ì« "+CREG: 0,5" „Ìù„«‰Ì„
; 0000 0127         if(strstr(response_buffer, ",1") || strstr(response_buffer, ",5"))
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 0128         {
; 0000 0129             glcd_outtextxy(0, 20, "Registered!");
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0000 012A             delay_ms(1000);
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0000 012B             break;
;PCODE: $00000314 VOL: 0
; 0000 012C         }
; 0000 012D         delay_ms(2000); // Â— 2 À«‰ÌÂ çò ò‰
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 012E     }
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 012F 
; 0000 0130     send_at_command("AT+SAPBR=3,1,\"Contype\",\"GPRS\"");
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 0131     get_full_response(2000);
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 0132     if (strstr(response_buffer, "OK") == NULL) return 0;
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 0133 
; 0000 0134     sprintf(command, "AT+SAPBR=3,1,\"APN\",\"%s\"", APN);
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0000 0135     send_at_command(command);
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
; 0000 0136     get_full_response(2000);
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 0137     if (strstr(response_buffer, "OK") == NULL) return 0;
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 0138 
; 0000 0139     return check_and_reopen_bearer(); // »—«Ì «Ê·Ì‰ « ’«· Â„ «“  «»⁄ ŒÊœ —„Ì„ùê— «” ›«œÂ „Ìùò‰Ì„
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0000 013A }
;PCODE: $00000349 VOL: 0

	.DSEG
_0x3A:
	.BYTE 0x67
;
;// «—”«· œ—ŒÊ«”  HTTP POST (»« »——”Ì « ’«· ﬁ»· «“ «—”«·)
;unsigned char send_http_post_request(char* phone, int product_id)
; 0000 013E {

	.CSEG
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0000 013F     char command[200], json_payload[128];
; 0000 0140     int json_len;
; 0000 0141     unsigned char success = 0;
; 0000 0142 
; 0000 0143     // „—Õ·Â 1: ﬁ»· «“ Â— ò«—Ì° « ’«· —« çò ò‰
; 0000 0144     if (!check_and_reopen_bearer())
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;	*phone -> Y+334
;	product_id -> Y+332
;	command -> Y+132
;	json_payload -> Y+4
;	json_len -> R16,R17
;	success -> R19
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 0000 0145     {
; 0000 0146         return 0; // «ê— « ’«· »—ﬁ—«— ‰‘œ° Œ«—Ã ‘Ê
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0000 0147     }
; 0000 0148 
; 0000 0149     sprintf(json_payload, "{\"phone_number\":%s,\"device_id\":%d,\"product_id\":%d}", phone, DEVICE_ID, product_id);
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 0000 014A     json_len = strlen(json_payload);
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0000 014B 
; 0000 014C     glcd_clear();
;PCODE: $0000036D VOL: 0
; 0000 014D     glcd_outtextxy(0, 0, "HTTP POST Request...");
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 014E 
; 0000 014F     send_at_command("AT+HTTPINIT");
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0000 0150     get_full_response(2000);
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 0151     if (strstr(response_buffer, "OK") == NULL) { send_at_command("AT+HTTPTERM"); return 0; }
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 0152 
; 0000 0153     // ... (»ﬁÌÂ „—«Õ· «—”«· HTTP „«‰‰œ ﬁ»·) ...
; 0000 0154 
; 0000 0155     send_at_command("AT+HTTPACTION=1");
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0000 0156     get_full_response(20000); // «›“«Ì‘ “„«‰ «‰ Ÿ«— »—«Ì Å«”Œ ”—Ê—
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 0157 
; 0000 0158     if (strstr(response_buffer, "+HTTPACTION: 1,200"))
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0000 0159     {
; 0000 015A         send_at_command("AT+HTTPREAD");
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 015B         get_full_response(5000);
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 015C         if(strstr(response_buffer, "ok")) { success = 1; }
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
; 0000 015D     }
;PCODE: $000003A3 VOL: 0
; 0000 015E 
; 0000 015F     send_at_command("AT+HTTPTERM");
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 0160     get_full_response(1000);
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
; 0000 0161     return success;
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 0162 }
;PCODE: $000003AE VOL: 0

	.DSEG
_0x44:
	.BYTE 0x6E
;
;// Å—œ«“‘ ÅÌ«„ò
;void process_sms(void)
; 0000 0166 {

	.CSEG
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0000 0167     char* token;
; 0000 0168     int product_id;
; 0000 0169     char sms_header_copy[100];
; 0000 016A 
; 0000 016B     // ›ﬁÿ «ê— ÅÌ«„ò ÃœÌœ »Êœ Å—œ«“‘ ò‰
; 0000 016C     if (strstr(response_buffer, "+CMT:"))
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;	*token -> R16,R17
;	product_id -> R18,R19
;	sms_header_copy -> Y+4
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 0000 016D     {
; 0000 016E         // Ìò òÅÌ «“ Âœ— ÅÌ«„ò  ÂÌÂ „Ìùò‰Ì„  « gets »⁄œÌ ¬‰ —« «“ »Ì‰ ‰»—œ
; 0000 016F         strcpy(sms_header_copy, response_buffer);
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0000 0170 
; 0000 0171         // „Õ Ê«Ì ÅÌ«„ò —« «“ Œÿ »⁄œÌ »ŒÊ«‰
; 0000 0172         memset(response_buffer, 0, sizeof(response_buffer));
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0000 0173         gets(response_buffer, sizeof(response_buffer));
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
; 0000 0174 
; 0000 0175         glcd_clear();
;PCODE: $000003C8 VOL: 0
; 0000 0176         glcd_outtextxy(0, 0, "New SMS Processing...");
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 0177 
; 0000 0178         // Õ«·« ‘„«—Â —« «“ òÅÌ Âœ— «” Œ—«Ã ò‰
; 0000 0179         token = strtok(sms_header_copy, "\"");
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
; 0000 017A         token = strtok(NULL, "\"");
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
; 0000 017B         if (token) { strcpy(sender_number, token); }
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
; 0000 017C 
; 0000 017D         // „Õ Ê« —« Å—œ«“‘ ò‰
; 0000 017E         if (strlen(response_buffer) > 0)
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0000 017F         {
; 0000 0180             char* p = strchr(response_buffer, '\r'); if(p) *p = '\0';
;PCODE: $000003E7 VOL: 0
;	sms_header_copy -> Y+6
;	*p -> Y+0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
; 0000 0181             product_id = atoi(response_buffer);
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
; 0000 0182 
; 0000 0183             if (product_id >= 1 && product_id <= 3)
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
; 0000 0184             {
; 0000 0185                 format_phone_number(sender_number);
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
; 0000 0186                 if (send_http_post_request(formatted_phone_number, product_id))
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
; 0000 0187                 {
; 0000 0188                     start_challenge_game(product_id);
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 0189                 }
; 0000 018A                 else { glcd_clear(); glcd_outtextxy(0, 10, "Server Tx Failed!"); delay_ms(2000); }
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
; 0000 018B             }
; 0000 018C             else { glcd_clear(); glcd_outtextxy(0, 10, "Invalid Product ID!"); delay_ms(2000); }
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
; 0000 018D         }
;PCODE: $00000425 VOL: 0
; 0000 018E 
; 0000 018F         // Õ«·« òÂ Â— œÊ »Œ‘ ÅÌ«„ò Å—œ«“‘ ‘œ° ¬‰ —« Å«ò ò‰
; 0000 0190         send_at_command("AT+CMGDA=\"DEL READ\"");
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
; 0000 0191         get_full_response(5000);
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
; 0000 0192     }
; 0000 0193 }
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0

	.DSEG
_0x49:
	.BYTE 0x56
;
;// =================================================================================
;// =====  «»⁄ «’·Ì »—‰«„Â (main) ===================================================
;// =============================================================================
;
;
;
;void main(void)
; 0000 019C {

	.CSEG
;PCODE: $00000431 VOL: 0
; 0000 019D 
; 0000 019E     // Declare your local variables here
; 0000 019F     // Variable used to store graphic display
; 0000 01A0     // controller initialization data
; 0000 01A1     GLCDINIT_t glcd_init_data;
; 0000 01A2 
; 0000 01A3     // Input/Output Ports initialization
; 0000 01A4     // Port A initialization
; 0000 01A5     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 01A6     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000432 VOL: 0
;	glcd_init_data -> Y+0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
; 0000 01A7     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 01A8     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 01A9 
; 0000 01AA     // Port B initialization
; 0000 01AB     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 01AC     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0000 01AD     // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 01AE     PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0000 01AF 
; 0000 01B0     // Port C initialization
; 0000 01B1     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 01B2     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
; 0000 01B3     // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=T Bit2=0 Bit1=0 Bit0=0
; 0000 01B4     PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
; 0000 01B5 
; 0000 01B6     // Port D initialization
; 0000 01B7     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 01B8     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
; 0000 01B9     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 01BA     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0000 01BB 
; 0000 01BC     // Port E initialization
; 0000 01BD     // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=In Bit0=In
; 0000 01BE     DDRE=(0<<DDE7) | (0<<DDE6) | (1<<DDE5) | (1<<DDE4) | (1<<DDE3) | (1<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
; 0000 01BF     // State: Bit7=T Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=T Bit0=T
; 0000 01C0     PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
; 0000 01C1 
; 0000 01C2     // Port F initialization
; 0000 01C3     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 01C4     DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
; 0000 01C5     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 01C6     PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
; 0000 01C7 
; 0000 01C8     // Port G initialization
; 0000 01C9     // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 01CA     DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
; 0000 01CB     // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 01CC     PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
; 0000 01CD 
; 0000 01CE     // Timer/Counter 0 initialization
; 0000 01CF     // Clock source: System Clock
; 0000 01D0     // Clock value: Timer 0 Stopped
; 0000 01D1     // Mode: Normal top=0xFF
; 0000 01D2     // OC0 output: Disconnected
; 0000 01D3     ASSR=0<<AS0;
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0000 01D4     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
; 0000 01D5     TCNT0=0x00;
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
; 0000 01D6     OCR0=0x00;
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
; 0000 01D7 
; 0000 01D8     // Timer/Counter 1 initialization
; 0000 01D9     // Clock source: System Clock
; 0000 01DA     // Clock value: Timer1 Stopped
; 0000 01DB     // Mode: Normal top=0xFFFF
; 0000 01DC     // OC1A output: Disconnected
; 0000 01DD     // OC1B output: Disconnected
; 0000 01DE     // OC1C output: Disconnected
; 0000 01DF     // Noise Canceler: Off
; 0000 01E0     // Input Capture on Falling Edge
; 0000 01E1     // Timer1 Overflow Interrupt: Off
; 0000 01E2     // Input Capture Interrupt: Off
; 0000 01E3     // Compare A Match Interrupt: Off
; 0000 01E4     // Compare B Match Interrupt: Off
; 0000 01E5     // Compare C Match Interrupt: Off
; 0000 01E6     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
; 0000 01E7     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
; 0000 01E8     TCNT1H=0x00;
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
; 0000 01E9     TCNT1L=0x00;
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
; 0000 01EA     ICR1H=0x00;
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
; 0000 01EB     ICR1L=0x00;
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
; 0000 01EC     OCR1AH=0x00;
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
; 0000 01ED     OCR1AL=0x00;
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
; 0000 01EE     OCR1BH=0x00;
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
; 0000 01EF     OCR1BL=0x00;
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
; 0000 01F0     OCR1CH=0x00;
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
; 0000 01F1     OCR1CL=0x00;
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
; 0000 01F2 
; 0000 01F3     // Timer/Counter 2 initialization
; 0000 01F4     // Clock source: System Clock
; 0000 01F5     // Clock value: Timer2 Stopped
; 0000 01F6     // Mode: Normal top=0xFF
; 0000 01F7     // OC2 output: Disconnected
; 0000 01F8     TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
; 0000 01F9     TCNT2=0x00;
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
; 0000 01FA     OCR2=0x00;
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
; 0000 01FB 
; 0000 01FC     // Timer/Counter 3 initialization
; 0000 01FD     // Clock source: System Clock
; 0000 01FE     // Clock value: Timer3 Stopped
; 0000 01FF     // Mode: Normal top=0xFFFF
; 0000 0200     // OC3A output: Disconnected
; 0000 0201     // OC3B output: Disconnected
; 0000 0202     // OC3C output: Disconnected
; 0000 0203     // Noise Canceler: Off
; 0000 0204     // Input Capture on Falling Edge
; 0000 0205     // Timer3 Overflow Interrupt: Off
; 0000 0206     // Input Capture Interrupt: Off
; 0000 0207     // Compare A Match Interrupt: Off
; 0000 0208     // Compare B Match Interrupt: Off
; 0000 0209     // Compare C Match Interrupt: Off
; 0000 020A     TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
; 0000 020B     TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
; 0000 020C     TCNT3H=0x00;
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
; 0000 020D     TCNT3L=0x00;
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
; 0000 020E     ICR3H=0x00;
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
; 0000 020F     ICR3L=0x00;
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
; 0000 0210     OCR3AH=0x00;
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
; 0000 0211     OCR3AL=0x00;
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
; 0000 0212     OCR3BH=0x00;
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
; 0000 0213     OCR3BL=0x00;
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
; 0000 0214     OCR3CH=0x00;
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
; 0000 0215     OCR3CL=0x00;
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
; 0000 0216 
; 0000 0217     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0218     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
; 0000 0219     ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
; 0000 021A 
; 0000 021B     // External Interrupt(s) initialization
; 0000 021C     // INT0: Off
; 0000 021D     // INT1: Off
; 0000 021E     // INT2: Off
; 0000 021F     // INT3: Off
; 0000 0220     // INT4: Off
; 0000 0221     // INT5: Off
; 0000 0222     // INT6: Off
; 0000 0223     // INT7: Off
; 0000 0224     EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
; 0000 0225     EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
; 0000 0226     EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
; 0000 0227 
; 0000 0228     // USART0 initialization
; 0000 0229     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 022A     // USART0 Receiver: On
; 0000 022B     // USART0 Transmitter: On
; 0000 022C     // USART0 Mode: Asynchronous
; 0000 022D     // USART0 Baud Rate: 9600
; 0000 022E     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
; 0000 022F     UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
; 0000 0230     UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
; 0000 0231     UBRR0H=0x00;
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
; 0000 0232     UBRR0L=0x33;
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
; 0000 0233 
; 0000 0234     // USART1 initialization
; 0000 0235     // USART1 disabled
; 0000 0236     UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
; 0000 0237 
; 0000 0238     // Analog Comparator initialization
; 0000 0239     // Analog Comparator: Off
; 0000 023A     // The Analog Comparator's positive input is
; 0000 023B     // connected to the AIN0 pin
; 0000 023C     // The Analog Comparator's negative input is
; 0000 023D     // connected to the AIN1 pin
; 0000 023E     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
; 0000 023F     SFIOR=(0<<ACME);
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
; 0000 0240 
; 0000 0241     // ADC initialization
; 0000 0242     // ADC disabled
; 0000 0243     ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 0000 0244 
; 0000 0245     // SPI initialization
; 0000 0246     // SPI disabled
; 0000 0247     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
; 0000 0248 
; 0000 0249     // TWI initialization
; 0000 024A     // TWI disabled
; 0000 024B     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
; 0000 024C     // ----- €Ì—›⁄«· ò—œ‰ JTAG (»—«Ì «” ›«œÂ «“ ÅÊ— ùÂ«Ì C Ê F œ— ’Ê—  ‰Ì«“) -----
; 0000 024D     MCUCSR = (1 << JTD);
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
; 0000 024E     MCUCSR = (1 << JTD);
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
; 0000 024F     // Graphic Display Controller initialization
; 0000 0250     // The KS0108 connections are specified in the
; 0000 0251     // Project|Configure|C Compiler|Libraries|Graphic Display menu:
; 0000 0252     // DB0 - PORTA Bit 0
; 0000 0253     // DB1 - PORTA Bit 1
; 0000 0254     // DB2 - PORTA Bit 2
; 0000 0255     // DB3 - PORTA Bit 3
; 0000 0256     // DB4 - PORTA Bit 4
; 0000 0257     // DB5 - PORTA Bit 5
; 0000 0258     // DB6 - PORTA Bit 6
; 0000 0259     // DB7 - PORTA Bit 7
; 0000 025A     // E - PORTF Bit 4
; 0000 025B     // RD /WR - PORTF Bit 3
; 0000 025C     // RS - PORTF Bit 2
; 0000 025D     // /RST - PORTF Bit 7
; 0000 025E     // CS1 - PORTF Bit 5
; 0000 025F     // CS2 - PORTF Bit 6
; 0000 0260 
; 0000 0261     // „ﬁœ«—œÂÌ «Ê·ÌÂ  Ê·Ìœ ò‰‰œÂ «⁄œ«œ  ’«œ›Ì
; 0000 0262     // »—«Ì  ’«œ›Ì »Êœ‰ »Ì‘ —° „Ìù Ê«‰ «“ „ﬁœ«— Ìò  «Ì„— ¬“«œ «” ›«œÂ ò—œ
; 0000 0263     // srand(TCNT0);
; 0000 0264     srand(TCNT0); // Ìò —Ê‘ «” «‰œ«—œ Ê·Ì „„ò‰ «”  œ— Â„Â ò«„Å«Ì·—Â«Ì embedded ò«— ‰ò‰œ
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 0265                        // «” ›«œÂ «“ rand() »Â  ‰Â«ÌÌ Â„ »—«Ì ‘—Ê⁄ ò«›Ì «” .
; 0000 0266 
; 0000 0267     // Specify the current font for displaying text
; 0000 0268     glcd_init_data.font=font5x7;
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
; 0000 0269     // No function is used for reading
; 0000 026A     // image data from external memory
; 0000 026B     glcd_init_data.readxmem=NULL;
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
; 0000 026C     // No function is used for writing
; 0000 026D     // image data to external memory
; 0000 026E     glcd_init_data.writexmem=NULL;
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
; 0000 026F 
; 0000 0270     glcd_init(&glcd_init_data);
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
; 0000 0271 
; 0000 0272 
; 0000 0273     glcd_setfont(font5x7);
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
; 0000 0274 
; 0000 0275     // ----- —«Âù«‰œ«“Ì „«éÊ· SIM800 -----
; 0000 0276     glcd_clear();
;PCODE: $000004C0 VOL: 0
; 0000 0277     glcd_outtextxy(0, 0, "Module Init...");
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
; 0000 0278     delay_ms(5000);
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
; 0000 0279 
; 0000 027A     send_at_command("ATE0"); get_full_response(1000);
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
; 0000 027B     send_at_command("AT"); get_full_response(1000);
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
; 0000 027C     if(strstr(response_buffer, "OK") == NULL) { glcd_outtextxy(0, 10, "Module Not Found!"); while(1); }
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
; 0000 027D 
; 0000 027E     // ----- —«Âù«‰œ«“Ì ”—ÊÌ”ùÂ«Ì ÅÌ«„ò Ê HTTP -----
; 0000 027F     if (!init_sms()) { glcd_outtextxy(0, 10, "SMS Init Failed!"); while(1); }
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
; 0000 0280     if (!init_http_bearer()) { glcd_outtextxy(0, 10, "HTTP Bearer Failed!"); while(1); }
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
; 0000 0281 
; 0000 0282     glcd_clear();
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
; 0000 0283     glcd_outtextxy(0, 0, "System Ready.");
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
; 0000 0284     glcd_outtextxy(0, 10, "Waiting for SMS...");
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
; 0000 0285 
; 0000 0286     // ----- Õ·ﬁÂ «’·Ì »—‰«„Â -----
; 0000 0287     while (1)
;PCODE: $00000511 VOL: 0
; 0000 0288     {
; 0000 0289         memset(response_buffer, 0, sizeof(response_buffer));
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
; 0000 028A         // «Ì‰Ã« ›ﬁÿ „‰ Ÿ— Œÿ «Ê· (Âœ—) ÅÌ«„ò „Ìù„«‰Ì„
; 0000 028B         gets(response_buffer, sizeof(response_buffer));
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
; 0000 028C 
; 0000 028D         if (strlen(response_buffer) > 0)
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
; 0000 028E         {
; 0000 028F             process_sms(); //  «»⁄ Å—œ«“‘ Â„Â ò«—Â« —« «‰Ã«„ „ÌùœÂœ
;PCODE: $00000520 VOL: 0
; 0000 0290             glcd_clear();
;PCODE: $00000521 VOL: 0
; 0000 0291             glcd_outtextxy(0, 0, "System Ready.");
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
; 0000 0292             glcd_outtextxy(0, 10, "Waiting for SMS...");
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
; 0000 0293         }
; 0000 0294 
; 0000 0295         delay_ms(100);
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
; 0000 0296     }
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
; 0000 0297 }
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0

	.DSEG
_0x53:
	.BYTE 0x93

#include <stdlib.h>
#include <stdint.h>
#include <glcd.h>
#include <delay.h>
#include <string.h>
#include "common.h"
#include "sim800.h"

//#define BUFFER_SIZE 512
#define MAX_RETRY   3   // Õœ«òÀ—  ⁄œ«œ  ·«‘



//char value[16];

char at_command[30];
char sim_number[15];

//char buffer[BUFFER_SIZE];
uint8_t attempts = 0;



void sim800_restart(void) {
    glcd_clear();
    glcd_outtextxy(0, 0, "Restarting SIM800...");

    // 1) »” ‰ HTTP Ê GPRS
    send_at_command("AT+HTTPTERM");
    delay_ms(100);

    send_at_command("AT+SAPBR=0,1");   // »” ‰ ò«‰ò‘‰ GPRS
    delay_ms(100);

    send_at_command("AT+CGATT=0");     // detach «“ ‘»òÂ
    delay_ms(100);

    // 2) —Ì”  ‰—„ù«›“«—Ì (ÌòÌ ò«›ÌÂ)
    send_at_command("AT+CFUN=1,1");    // —Ì”  ò«„·
    delay_ms(500);                    // ’»— ò‰  « »«·« »Ì«œ

    // 3) Œ«„Ê‘ ò—œ‰ echo
    uart_buffer_reset();
    send_at_command("ATE0");
    delay_ms(100);

    // 4)  ”  ¬„«œÂ »Êœ‰ „«éÊ·
    uart_buffer_reset();
    send_at_command("AT");
    if (!read_until_keyword_keep_all(buffer, BUFFER_SIZE, 3000, "OK")) {
        glcd_outtextxy(0, 10, "SIM800 not responding!");
        return;
    }

    glcd_outtextxy(0, 20, "Restart Done!");
}






//void sim800_restart(void) {
//
//    glcd_clear();
//    glcd_outtextxy(0, 0, "Restarting SIM800...");
//
//    // --- —Ì”  »«›— UART ---
//    send_at_command("AT+HTTPTERM");
//    delay_ms(50); 
//
//    send_at_command("AT+SAPBR=0,1");   // »” ‰ ò«‰ò‘‰ GPRS
//    delay_ms(50);
//    
//    send_at_command("AT+SAPBR=2,1"); 
//    delay_ms(50);
//
//
//    send_at_command("AT+CGATT=0"); 
//    delay_ms(50);
//    
////    
////    send_at_command("AT+CGATT=1"); 
////    delay_ms(50);
//
//    // --- ‰—„ù«›“«— —Ì”  „«éÊ· («Œ Ì«—Ì) ---                      // “„«‰ »—«Ì —Ìù«” «— 
//
////    send_at_command("AT+CRESET");
////    delay_ms(100);
//
//    send_at_command("AT+CFUN=0");  // —Ìù«” «—  „«éÊ·
//    delay_ms(100);                       // “„«‰ »—«Ì —Ìù«” «— 
//    
//  
//    send_at_command("AT+CFUN=1");  // —Ìù«” «—  „«éÊ·
//    delay_ms(100);                       // “„«‰ »—«Ì —Ìù«” «— 
//
//
////    send_at_command("AT+CFUN=1,1");  // —Ìù«” «—  „«éÊ·
////    delay_ms(2000); 
//
//    // --- Œ«„Ê‘ ò—œ‰ Echo ---
//    uart_buffer_reset();
//    send_at_command("ATE0");
//    delay_ms(50);
//
//    // --- »——”Ì ¬„«œÂ »Êœ‰ „«éÊ· ---
//    uart_buffer_reset();
//    send_at_command("AT");
//    if (!read_until_keyword_keep_all(buffer, BUFFER_SIZE, 2000, "OK")) {
//        glcd_outtextxy(0, 10, "SIM800 not responding!");
//        return;  // ‘ò”  œ— —«Âù«‰œ«“Ì
//    }
//    
//}


unsigned char check_sim(void) {
    int stat;
    char *comma;
    
    glcd_clear();
    // --- »——”Ì Ê÷⁄Ì  ”Ì„ùò«—  ---
    uart_buffer_reset();
    send_at_command("AT+CPIN?");
    if (read_until_keyword_keep_all(buffer, BUFFER_SIZE, 5000, "CPIN")) {
//        glcd_outtextxy(0, 0, buffer); 
//        delay_ms(5000); 
        if (extract_field_after_keyword(buffer, "+CPIN:", 0, value, sizeof(value))) {
            glcd_outtextxy(0, 16, value);  // ›ﬁÿ READY Ì« PIN
        }   
        delay_ms(100);
    } 
    
//    uart_buffer_reset();
//    send_at_command("AT+CREG?");
//    if (read_until_keyword_keep_all(buffer, BUFFER_SIZE, 5000, "+CREG")) { 
//        glcd_outtextxy(0, 0, buffer); 
//        if (extract_value_after_keyword(buffer, "+CREG:", value, sizeof(value))) {
//            glcd_outtextxy(0, 16, value);  // ›ﬁÿ READY Ì« PIN
//        }   
//    } 

    // --- »——”Ì Ê÷⁄Ì  ‘»òÂ  « “„«‰ « ’«· ---
    do { 
        glcd_clear();
        uart_buffer_reset();
        send_at_command("AT+CREG?");
        if (read_until_keyword_keep_all(buffer, BUFFER_SIZE, 2000, "CREG")) {
//            glcd_outtextxy(0, 10, buffer);  // ‰„«Ì‘ Ê÷⁄Ì  ‘»òÂ 
            
            
            if (extract_field_after_keyword(buffer, "+CREG:", 1, value, sizeof(value))) { 
                glcd_outtextxy(0, 10, value); 
                delay_ms(100);
//                stat = atoi(value);
                if (atoi(value) == 1) break;
            }
        }
        glcd_outtextxy(0, 15, "Waiting for network...");
        
    } while (1);

    glcd_outtextxy(0, 20, "Network OK!");
    delay_ms(100);

//    uart_buffer_reset();
//    send_at_command("AT+CUSD=1,\"*733*2#\"");
//    if (read_until_keyword_keep_all(buffer, sizeof(buffer), 3000, "CUSD")) {
//        glcd_clear();
//        glcd_outtextxy(0, 0, buffer);  // ‘„«—Â —ÊÌ GLCD ‰„«Ì‘ œ«œÂ „Ìù‘Êœ  
//        delay_ms(1000);        // «” Œ—«Ã ‘„«—Â  ·›‰ 
//        
//        if (extract_field_after_keyword(buffer, "+CUSD:", 1, sim_number, sizeof(sim_number))){
//            glcd_clear();
//            glcd_outtextxy(0, 0, sim_number);  // ‘„«—Â —ÊÌ GLCD ‰„«Ì‘ œ«œÂ „Ìù‘Êœ  
//            delay_ms(1000); 
//        }
//    }

    return 1;  // „Ê›ﬁÌ 

}



unsigned char check_signal_quality(void) {
    
    uart_buffer_reset();
    send_at_command("AT+CSQ");

    if (read_until_keyword_keep_all(buffer, BUFFER_SIZE, 5000, "CSQ")) {
//        glcd_clear();
//        glcd_outtextxy(0, 0, buffer);  

        if (extract_field_after_keyword(buffer, "+CSQ:", 0, value, sizeof(value))) {
//            int csq = atoi(value);  //  »œÌ· —‘ Â »Â ⁄œœ
            glcd_clear();
            glcd_outtextxy(0, 16, value);  // ‰„«Ì‘ „ﬁœ«— ”Ìê‰«· 
            delay_ms(500);
            //stat = atoi(value);
            if (atoi(value) < 5) {
                // ”Ìê‰«· ÷⁄Ì› => ‰Ì«“ »Â —Ì” 
                return 0;
            } else {
                return 1;
            }
        }
    }
    return 0; // «ê— «’·« Å«”ŒÌ ‰ê—› Ì„
}




unsigned char check_signal_with_restart() {
    int i;
    for (i = 0; i < MAX_RETRY; i++) {
        if (check_signal_quality()) {
            // ”Ìê‰«· ŒÊ»Â° «“ Õ·ﬁÂ Œ«—Ã ‘Ê
            return 1;
        }
        // «ê— ”Ìê‰«· ‰»Êœ:
        sim800_restart();   // —Ìù«” «—  „«éÊ· 
        check_sim();
    }
    // «ê— «Ì‰Ã« —”Ìœ Ì⁄‰Ì »⁄œ «“ 3 »«— Â„ ”Ìê‰«· œ—”  ‰‘œ
    // „Ì Ê‰Ì ·«ê »êÌ—Ì Ì« Â‰œ· Œÿ« ò‰Ì
    printf("No signal after %d retries!\n", MAX_RETRY);
}



unsigned char init_sms(void)
{
    glcd_clear();
    glcd_outtextxy(0, 0, "Setting SMS Mode...");        
    
    send_at_command("AT+CFUN=1");
    delay_ms(50);

    send_at_command("AT+CSCLK=0");
    delay_ms(50);

    //  ‰ŸÌ„ SMS
    send_at_command("AT+CMGF=1");
    delay_ms(50);

    send_at_command("AT+CNMI=2,2,0,0,0");
    delay_ms(50);

    send_at_command("AT+CMGDA=\"DEL ALL\"");
    delay_ms(50);

    glcd_outtextxy(0, 10, "SMS Ready.");
    delay_ms(50);

    return 1;
}



unsigned char init_GPRS(void)
{
    
    glcd_clear();
    glcd_outtextxy(0, 0, "Connecting to GPRS...");

    send_at_command("AT+SAPBR=3,1,\"Contype\",\"GPRS\"");
    delay_ms(100);

    sprintf(at_command, "AT+SAPBR=3,1,\"APN\",\"%s\"", APN);
    send_at_command(at_command);
    delay_ms(100);
    
    uart_buffer_reset();
    
    send_at_command("AT+SAPBR=1,1");
    if (read_until_keyword_keep_all(buffer, BUFFER_SIZE, 5000, "OK")) {
        glcd_outtextxy(0, 0, buffer);  // »«Ìœ ò· Œ—ÊÃÌ "+CSQ: 11,0" Ê "OK" ç«Å ‘Êœ   
        delay_ms(100);
    }
    
    glcd_clear();
    glcd_outtextxy(0, 0, "Fetching IP...");

    while (attempts < 3) {
        uart_buffer_reset();
        send_at_command("AT+SAPBR=2,1");

        if (read_until_keyword_keep_all(buffer, BUFFER_SIZE, 5000, "SAPBR")) {
            // «” Œ—«Ã status (›Ì·œ œÊ„ »⁄œ «“ +SAPBR:)
            if (extract_field_after_keyword(buffer, "+SAPBR:", 1, value, sizeof(value))) {
                if (atoi(value) == 1) { 
                    // «ê— status=1 »Êœ° ›Ì·œ ”Ê„ Â„Ê‰ IP —Ê ‰‘Ê‰ »œÂ
                    if (extract_field_after_keyword(buffer, "+SAPBR:", 2, value, sizeof(value))) {
                        glcd_clear();
                        glcd_outtextxy(0, 0, value);
                        delay_ms(300);
                        return 1; // „Ê›ﬁ
                    }
                }
            }
        }

        // «ê— »Â «Ì‰Ã« —”Ìœ Ì⁄‰Ì „Ê›ﬁ ‰»ÊœÂ
        attempts++;
        delay_ms(100);
    }

    // »⁄œ «“ 3 »«—  ·«‘ ‰«„Ê›ﬁ
    glcd_clear();
    glcd_outtextxy(0, 0, "No IP");
    return 0; // ‰«„Ê›ﬁ
}


void gprs_keep_alive(void) {
    glcd_clear();
    glcd_outtextxy(0, 0, "Checking Internet...");  

    uart_buffer_reset();
    send_at_command("AT+HTTPTERM");
    delay_ms(100);

    // --- ‘—Ê⁄ HTTP ---
    uart_buffer_reset();
    send_at_command("AT+HTTPINIT");
    delay_ms(100);

    // --- «‰ Œ«» ò«‰ò‘‰ GPRS ---
    uart_buffer_reset();
    send_at_command("AT+HTTPPARA=\"CID\",1");
    delay_ms(100);

    // ---  ‰ŸÌ„ URL ---
    uart_buffer_reset();
    send_at_command("AT+HTTPPARA=\"URL\",\"http://www.google.com\"");
    delay_ms(100);

    // --- «—”«· œ—ŒÊ«”  GET ---
    uart_buffer_reset();
    send_at_command("AT+HTTPACTION=0"); // 0=GET
    delay_ms(100); // ’»— »—«Ì Å«”Œ HTTP

    // --- »——”Ì Å«”Œ ---
    uart_buffer_reset();
    if (read_until_keyword_keep_all(buffer, BUFFER_SIZE, 5000, "HTTPACTION:")) {
        // „À«· Œ—ÊÃÌ: +HTTPACTION:0,200,1256
//        int status = 0;

        // ›Ì·œ œÊ„ »⁄œ «“ +HTTPACTION: Â„«‰ òœ Ê÷⁄Ì  HTTP «” 
        if (extract_field_after_keyword(buffer, "+HTTPACTION", 1, value, sizeof(value))) {
//            status = atoi(value);  //  »œÌ· —‘ Â »Â ⁄œœ

            if (atoi(value) == 200) {
                glcd_outtextxy(0, 16, "Internet OK");
            } else {
                glcd_outtextxy(0, 16, "Internet Failed");
            }
        } else {
            glcd_outtextxy(0, 16, "Parsing Error!");
        }
    } 
    else {
        glcd_outtextxy(0, 16, "No response!");
    }

    delay_ms(100);

    // --- Å«Ì«‰ HTTP ---
    uart_buffer_reset();
    send_at_command("AT+HTTPTERM");
    delay_ms(100);
}

